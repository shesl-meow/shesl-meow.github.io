<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenSSL on shesl's blog</title><link>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/</link><description>Recent content in OpenSSL on shesl's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>shesl-meow@qq.com (佘崧林)</managingEditor><webMaster>shesl-meow@qq.com (佘崧林)</webMaster><atom:link href="http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/1.aboutcsr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>shesl-meow@qq.com (佘崧林)</author><guid>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/1.aboutcsr/</guid><description>About Certificate Signing Requests (CSRs) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 graph TB; subgraph Client; F{Infomation}; PK1(&amp;#34;PrivateKey(*.key)&amp;#34;); PK2(&amp;#34;PublicKey(*.pub)&amp;#34;); DN(&amp;#34;DistinguisedName(DN)&amp;#34;) CSR(&amp;#34;CertificateSigningRequest(*.csr)&amp;#34;) F---PK1; F---PK2; F---DN; PK2--&amp;gt;CSR; DN--&amp;gt;CSR CRTclient(&amp;#34;ClientCertificate(*.crt)&amp;#34;) end subgraph CAroot; CRTroot(&amp;#34;CACertificate(*.crt)&amp;#34;) end CSR--&amp;gt;|request|CRTroot CRTroot--&amp;gt;|sign|CRTclient If you would like to obtain an SSL certificate from a certificate authority (CA), you must generate a certificate signing request (CSR). A CSR consists mainly of the public key of a key pair, and some additional information.</description></item><item><title/><link>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/2.generatecsr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>shesl-meow@qq.com (佘崧林)</author><guid>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/2.generatecsr/</guid><description>Generating CSRs Generate a private key and a CSR This command creates a 2048-bit private key (domain.key) and a CSR (domain.csr) from scratch:
1 2 3 $ openssl req \ -newkey rsa:2048 -nodes -keyout domain.key \ -out domain.csr The -newkey rsa:2048 option specifies that the key should be 2048-bit, generated using the RSA algorithm.
The -nodes option specifies that the private key should not be encrypted with a pass phrase.</description></item><item><title/><link>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/3.generatessl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>shesl-meow@qq.com (佘崧林)</author><guid>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/3.generatessl/</guid><description>Generating SSL Certificates If you would like to use an SSL certificate to secure a service but you do not require a CA-signed certificate, a valid (and free) solution is to sign your own certificates.
A common type of certificate that you can issue yourself is a self-signed certificate. Therefore, self-signed certificates should only be used if you do not need to prove your service&amp;rsquo;s identity to its users (e.g. non-production or non-public servers).</description></item><item><title/><link>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/4.viewcertificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>shesl-meow@qq.com (佘崧林)</author><guid>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/4.viewcertificate/</guid><description>View Certificates CSR Entries This command allows you to view and verify the contents of a CSR (domain.csr) in plain text:
1 $ openssl req -text -noout -verify -in domain.csr Certificate Entries This command allows you to view the contents of a certificate (domain.crt) in plain text:
1 $ openssl x509 -text -noout -in domain.crt Verify a Certificate was Signed by a CA Use this command to verify that a certificate (domain.</description></item><item><title/><link>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/5.privatekey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>shesl-meow@qq.com (佘崧林)</author><guid>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/5.privatekey/</guid><description>Private Key Create a Private Key Use this command to create a password-protected, 2048-bit private key (domain.key):
1 $ openssl genrsa -des3 -out domain.key 2048 Verify a Private Key Use this command to check that a private key (domain.key) is a valid key:
1 $ openssl rsa -check -in domain.key Verify a Private Key Matches a Certificate and CSR Use these commands to verify if a private key (domain.</description></item><item><title/><link>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/6.convertformats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>shesl-meow@qq.com (佘崧林)</author><guid>http://shesl-meow.github.io/book/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/openssl/6.convertformats/</guid><description>Convert Formats All of the certificates that we have been working with have been X.509 certificates that are ASCII PEM encoded.
OpenSSL can be used to convert certificates to and from a large variety of these formats. This section will cover a some of the possible conversions.
Convert PEM to DER Use this command if you want to convert a PEM-encoded certificate (domain.crt) to a DER-encoded certificate (domain.der), a binary format:</description></item></channel></rss>