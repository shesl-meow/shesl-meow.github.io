<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>函数式编程 - 分类 - shesl's blog</title><link>http://shesl-meow.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link><description>函数式编程 - 分类 - shesl's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>shesl-meow@qq.com (佘崧林)</managingEditor><webMaster>shesl-meow@qq.com (佘崧林)</webMaster><lastBuildDate>Sun, 27 Jun 2021 21:12:21 +0800</lastBuildDate><atom:link href="http://shesl-meow.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/" rel="self" type="application/rss+xml"/><item><title>Applicative</title><link>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4.applicative/</link><pubDate>Sun, 27 Jun 2021 21:12:21 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4.applicative/</guid><description>Brief Introduction Applicative 指的是这样的一个性质：functor 之间可以相互 apply。 看下面这样一个例子： 1 Container.of(2).chain(two =&amp;gt; Container.of(3).map(add(two))); 上面是一个用 Monad 实现 2+3 的例子，可以看到我们需要构</description></item><item><title>Monad</title><link>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/3.monad/</link><pubDate>Sun, 20 Jun 2021 13:47:53 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/3.monad/</guid><description>Pointy Functor Factory 在前面有关 Functor 的论述中使用了 of 函数，实际上这个函数并不是用来替换 new 这个操作符的： Pointed Functor：一种实现了 of 方法的 Functor。 of 方</description></item><item><title>函数式编程入门</title><link>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/1.basic/</link><pubDate>Sun, 06 Jun 2021 11:59:37 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/1.basic/</guid><description>纯函数 什么是纯函数？ 纯函数：相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。 为什么要追求纯函数？ 可缓存性（Cacheable）</description></item><item><title>容器</title><link>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/2.container/</link><pubDate>Sun, 06 Jun 2021 11:59:37 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/2.container/</guid><description>通过一些基础的函数式编程操作，我们得以更优雅地进行编程，但是之前使用的纯函数编程方法却并不能解决所有的问题。比如：控制流、异常处理、异步操作</description></item></channel></rss>