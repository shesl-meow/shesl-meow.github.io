<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>工具使用接口 - 分类 - shesl's blog</title><link>http://shesl-meow.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/</link><description>工具使用接口 - 分类 - shesl's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>shesl-meow@qq.com (佘崧林)</managingEditor><webMaster>shesl-meow@qq.com (佘崧林)</webMaster><lastBuildDate>Thu, 05 May 2022 23:35:00 +0800</lastBuildDate><atom:link href="http://shesl-meow.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/" rel="self" type="application/rss+xml"/><item><title>Go Modules</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/gomodules/</link><pubDate>Thu, 05 May 2022 23:35:00 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/gomodules/</guid><description>参考资料：https://mp.weixin.qq.com/s/zo7zmEVXvxgr80n6H_49Mg 什么是 Go Modules？ Golang 的依赖</description></item><item><title>Golang GC</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Tue, 31 Aug 2021 00:21:18 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>常见 GC 算法 名称 描述 优点 缺点 引用计数 根据对象自身的引用计数来回收，当引用计数归零时进行回收。 简单直接，回收速度快 需要额外的空间存放计数； 需要频</description></item><item><title>Hooks.md</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/reactjs/hooks/</link><pubDate>Sun, 08 Aug 2021 17:15:28 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/reactjs/hooks/</guid><description>参考文档： https://zh-hans.reactjs.org/docs/hooks-intro https://www.yuque.com/qianduanyongbuweinu/efahmp/vasyzy#8OGwa Hooks 例子 与 Hooks 相关的 API 都是 use 开头的，它返回一个元组。以 useState 为例，它返回第一个元素即这个状态，第二个元素是设置这个状态的函数。 先看一个</description></item><item><title>Proxy</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/proxy/</link><pubDate>Sun, 08 Aug 2021 17:15:28 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/proxy/</guid><description>参考资料： https://zhuanlan.zhihu.com/p/75407419 https://zhuanlan.zhihu.com/p/69106037 实例 直接看一个例子： 1 2 3 4 5 6 let target = { x: 10, y: 20, }; let hanler = { get: (obj, prop) =&amp;gt; 42 }; target = new Proxy(target, hanler); target.x; //42 target.y; //42</description></item><item><title>常用关键字</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/draveness/%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Sun, 18 Jul 2021 13:43:33 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/draveness/%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>defer 实例 下面是一个使用 defer 的实例： 1 2 3 4 5 6 7 8 9 10 func createPost(db *gorm.DB) error { tx := db.Begin() defer tx.Rollback() if err := tx.Create(&amp;amp;Post{Author: &amp;#34;Draveness&amp;#34;}).Error; err != nil { return err } return tx.Commit().Error } 可见它的用法是：defer 之后指定的语句</description></item><item><title>菜鸟教程</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/</link><pubDate>Sun, 11 Jul 2021 18:19:34 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/golang/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/</guid><description>语言教程 计算机软件经历了数十年的发展，形成了多种学术流派，有面向过程编程、面向对象编程、函数式编程、面向消息编程等，这些思想究竟孰优孰劣，众</description></item><item><title>Commonjs vs ES Modules</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/nodejs/nodemodules/</link><pubDate>Tue, 15 Jun 2021 10:21:42 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/nodejs/nodemodules/</guid><description>参考： https://www.zhihu.com/question/62791509 https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1 What’s CJS? What’s ESM? 在 Node 模块的早期，所有的 Node Module 都是用 Common.js 编写的。我们可以从 named export 与 default export 两种方式简单地了解它的使用规则： named exp</description></item><item><title>React 进阶</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/reactjs/2.react%E8%BF%9B%E9%98%B6/</link><pubDate>Sat, 29 May 2021 22:19:17 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/reactjs/2.react%E8%BF%9B%E9%98%B6/</guid><description>Context Context 是 React 中比较特殊的对象，是一种组件中传值的特殊方式。 因为 React 中的数据流向是单向的，所以如果需要在层级很深的组件树中传值的话，需要不断地从 props 中</description></item><item><title>React 基础</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/reactjs/1.react%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 17 May 2021 01:25:02 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/reactjs/1.react%E5%9F%BA%E7%A1%80/</guid><description>从原生到 React 原生例子 一个 demo，如何用原生的 JavaScript 实现一个点赞按钮（即简单的点击一次更换一次图片）。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>Reflect.md</title><link>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/reflect/</link><pubDate>Mon, 26 Apr 2021 11:02:26 +0800</pubDate><author>佘崧林</author><guid>http://shesl-meow.github.io/note/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/reflect/</guid><description>https://es6.ruanyifeng.com/#docs/reflect Reflect 概述 Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个： 将 Object 对象的一些明</description></item></channel></rss>