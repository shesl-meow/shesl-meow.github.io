<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iOS逆向分析 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</link><description>Recent content in iOS逆向分析 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/1.%E6%AD%A3%E5%90%91%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/1.%E6%AD%A3%E5%90%91%E5%9F%BA%E7%A1%80/</guid><description>正向基础 # App 结构与构建 # 应用包的本质？
iOS 中的应用包有 .app 与 .ipa 两种形式，前者就是一个文件夹，后者是这个文件夹的 zip 格式压缩包（Android 中的 .apk）。
如何获取一个线上 App 的 ipa 文件包？
在 iTunes 之后，苹果官方提供了一个方法进行 ipa 的下载，即应用：Apple Configurator 2。在这个应用中下载了 App 之后，可以在以下的文件夹下找到 ipa 文件：
/Users/shesonglin/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps App 签名 # 签名原理 # App 签名是一个基于 CA 的认证架构，CA 指 Certificate Authority，对于 CA 机构的信任是一切现代信息安全互信体系的基石。
CA 的认证流程大致如下：
上面的流程大致的阐述了如何实现一个用户，如何实现对一个未知身份的开发者的信任问题。
对于这一体系在 App 信任中的应用，则可以用下面的流程阐述：
具体在 iOS 中，App 签名这个过程中有以下关键的几个文件：
CertificateSigningRequest.certSigningRequest：对应上图中的 Dev-PublicKey 的打包文件； iOS_development.cer；对应上图一中绿色的 certificate 文件； Entitlements 授权文件，一般是 plist 后缀：在上图二中，对 App 的哈希过程中，也会加入 App 的授权信息； 重签名 # 一旦改变了 App 的二进制内容或任何授权内容，上面的授权信息 distribution certificate 就会被破坏。App 信息完整性验证这一过程就会失败，因此我们就需要对 App 进行重签名。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/2.%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/2.%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</guid><description>静态分析 # iOS 的静态分析工具主要有 Hopper/IDA Pro。
Hopper # IDA Pro # 下面是一些 IDA Pro 的常用功能与快捷键：
字符串搜索：Alt+T (Windows)；Option+T (Mac OS)； 跳转地址：在 IDA 中按 &amp;ldquo;G&amp;rdquo;，输入指定的跳转地址即可跳转； 编写注释： 可重复注释：按 &amp;ldquo;;&amp;rdquo; 分号，可以添加可重复注释，这种注释会同时出现在其交叉引用的地方； 非重复注释：按 &amp;ldquo;:&amp;rdquo; 冒号，可添加重复注释，优先级大于前者，不过不会出现在交叉引用的位置； 伪代码注释：直接按 &amp;ldquo;/&amp;rdquo; 分号，可以为伪代码添加注释； 变量重命名：单击目标变量，按 &amp;ldquo;N&amp;rdquo; 进行重命名； 查看交叉引用：选中函数/变量，按 &amp;ldquo;X&amp;rdquo; 可以查看当前位置被哪些地方引用了； 进制转换：伪代码展示的数字默认进制是十进制，可以按 &amp;ldquo;H&amp;rdquo; 进行进制转换； 类型声明：变量类型/方法参数签名等，如果 IDA 默认识别有问题，可以按 &amp;ldquo;Y&amp;rdquo; 进行重声明； 格式转化： 在被解析为数据的位置按 &amp;ldquo;C&amp;rdquo; 可以解析为代码，反之按 &amp;ldquo;D&amp;rdquo;； 对于一连串的 ASCII 字符，按 &amp;ldquo;A&amp;rdquo; 可以将一连串地址的字符转化为字符串； 按 &amp;ldquo;U&amp;rdquo; 可以取消对数据段的解析； 静态分析实践 # 产物分析 # 我们使用 XCode 默认建立的工程，在 viewDidLoad 里面编写了一段代码，看看这写代码是如何实现的：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/3.%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ios%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/3.%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90/</guid><description/></item></channel></rss>