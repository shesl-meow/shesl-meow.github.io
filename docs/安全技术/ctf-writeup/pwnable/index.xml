<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pwnable on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/</link><description>Recent content in pwnable on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/1.start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/1.start/</guid><description>参考资料：
安全客，前六题的题解：https://www.anquanke.com/post/id/150359 Linux Syscall Reference：http://syscalls.kernelgrok.com/ Assembly Reference: https://www.felixcloutier.com/x86/ START # 首先检查安全保护等级：
$ checksec ./start [*] &amp;#39;/mnt/d/program/ctf/pwnable/start/start&amp;#39; Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) 查看汇编代码：
$ objdump -d ./start ./start: file format elf32-i386 Disassembly of section .text: 08048060 &amp;lt;_start&amp;gt;: 8048060: 54 push %esp 8048061: 68 9d 80 04 08 push $0x804809d 8048066: 31 c0 xor %eax,%eax 8048068: 31 db xor %ebx,%ebx 804806a: 31 c9 xor %ecx,%ecx 804806c: 31 d2 xor %edx,%edx 804806e: 68 43 54 46 3a push $0x3a465443 8048073: 68 74 68 65 20 push $0x20656874 8048078: 68 61 72 74 20 push $0x20747261 804807d: 68 73 20 73 74 push $0x74732073 8048082: 68 4c 65 74 27 push $0x2774654c 8048087: 89 e1 mov %esp,%ecx 8048089: b2 14 mov $0x14,%dl 804808b: b3 01 mov $0x1,%bl 804808d: b0 04 mov $0x4,%al 804808f: cd 80 int $0x80 8048091: 31 db xor %ebx,%ebx 8048093: b2 3c mov $0x3c,%dl 8048095: b0 03 mov $0x3,%al 8048097: cd 80 int $0x80 8048099: 83 c4 14 add $0x14,%esp 804809c: c3 ret 0804809d &amp;lt;_exit&amp;gt;: 804809d: 5c pop %esp 804809e: 31 c0 xor %eax,%eax 80480a0: 40 inc %eax 80480a1: cd 80 int $0x80 我们分析这个汇编代码的结构：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/2.orw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/2.orw/</guid><description>参考资料：
https://www.anquanke.com/post/id/150359 ORW # 首先检查安全保护等级：
$ checksec orw [*] &amp;#39;/media/data/program/ctf/pwnable/orw/orw&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 可以看到这个程序开启了以下保护机制：
Canary 开启，部分 RELOAD，还有 RWX 读写执行段。 在 gdb 里面可以查看 main 函数的汇编代码：
(gdb) info functions
All defined functions:
Non-debugging symbols:
0x08048330 _init
0x08048370 read@plt
0x08048380 printf@plt
0x08048390 __stack_chk_fail@plt
0x080483a0 __libc_start_main@plt
0x080483b0 prctl@plt
0x080483c0 __gmon_start__@plt
0x080483d0 _start
0x08048400 __x86.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/3.calc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/3.calc/</guid><description>CALC # 保护等级 # 首先检查安全保护等级：
$ checksec calc [*] &amp;#39;/media/data/program/ctf/pwnable/calc/calc&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) 程序开启了 NX 保护，不能执行栈代码。我们再看程序的链接方式：
$ objdump -R calc calc： 文件格式 elf32-i386 objdump: calc：不是动态对象 objdump: calc: invalid operation 程序是静态链接。
程序逻辑 # main # 在 gdb 中我们可以看到这个程序的逻辑结构过于复杂，我们使用 Ida Pro 打开。首先看 main 函数，可以在 Ida Pro 中查看其伪代码：
int __cdecl main(int argc, const char **argv, const char **envp) { ssignal(14, timeout); alarm(60); puts(&amp;#34;=== Welcome to SECPROG calculator ===&amp;#34;); fflush(stdout); calc(); return puts(&amp;#34;Merry Christmas!</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/4.3x17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/ctf-writeup/pwnable/4.3x17/</guid><description>参考资料：
https://github.com/maroueneboubakri/lscan/wiki/Reverse-Engineer-a-stripped-binary-with-lscan-and-IDApro https://www.jianshu.com/p/7a1441e4f355 3x17 # 保护等级 # 首先检查程序的保护等级：
$ checksec 3x17 [*] &amp;#39;/media/data/program/ctf/pwnable/3x17/3x17&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) 首先我们发现这是一个 64 位的程序，另外程序没有开启栈溢出的 canary 保护，但是堆栈不可执行。
我们再看程序的链接方式：
$ objdump -R 3x17 3x17： 文件格式 elf64-x86-64 objdump: 3x17：不是动态对象 objdump: 3x17: invalid operation 是一个静态链接的文件。看各个段的权限：
gdb-peda$ vmmap Start End Perm Name 0x00401000 0x0048e335 rx-p /root/ctf/pwnable/3x17/3x17 0x00400200 0x004b2a31 r--p /root/ctf/pwnable/3x17/3x17 0x004b40c0 0x004baa20 rw-p /root/ctf/pwnable/3x17/3x17 加载 sig 函数签名 # lscan.</description></item></channel></rss>