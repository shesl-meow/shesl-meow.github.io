<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1.客户端安全 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/</link><description>Recent content in 1.客户端安全 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/</guid><description>浏览器安全 # 同源策略 # 什么是同源策略（Same Origin Policy）？
浏览器的同源策略，限制了来自不同源的 document 或脚本之间的读取访问。 源的因素有很多种：域名与子域名、IP 地址、端口、协议。
src 属性资源文件的加载：
需要注意的是，存放 JS 文件的域并不重要；重要的是 JS 文件加载的域。
在浏览器中 &amp;lt;script&amp;gt;、&amp;lt;img&amp;gt;、&amp;lt;iframe&amp;gt;、&amp;lt;link&amp;gt; 等标签都可以被跨域加载资源，而不受同源策略的限制。
这些带 src 属性的标签每次加载时，实际上是由浏览器发起了一次 GET 请求。
不同于 XMLHttpRequest 的是：通过 src 属性加载的资源，浏览器限制了其权限（不能读写返回的内容）。
XMLHttpRequest 请求：
如果 XMLHttpRequest 能够跨域访问资源，则可能会导致一些敏感资源的泄露。比如：CSRF 的 token，从而导致发生安全问题。
随着业务的发展，W3C 委员会制定了 XMLHttpRequest 跨域访问标准：它需要通过目标域返回的 HTTP 头来授权是否允许跨域访问。
安全性基于：因为 HTTP 请求头一般是无法被 JS 控制的，所以认为这个方案是可以实施的。
对于浏览器来说，除了 DOM、Cookie、XMLHttpRequest 会受到同源策略的限制外，浏览器加载的一些第三方插件也有各自的同源策略。最常见的比如：Flash、Java Applet、Silverlight、Google Gears 等都有自己同源策略。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/2.%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBxss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/2.%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBxss/</guid><description>跨站脚本攻击（XSS） # OWASP TOP 10 威胁曾多次把 XSS 列在榜首。
XSS 简介 # 跨站脚本攻击：
Cross Site Script (XSS)。通常指黑客通过 HTML 注入的方式篡改了网页、插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击。 XSS 根据效果不同可以分为如下几类：
反射型 XSS，或称 “非持久型 XSS”（Non-persistent XSS）。只是简单地把用户的输入 “反射” 给浏览器。 存储型 XSS，或称 “持久型 XSS”（Persistent XSS）。会把用户输入的数据 “存储” 在服务端，这种 XSS 具有很强的稳定性。 DOM Based XSS。这种 XSS 从效果上来看也属于反射型 XSS。与后者的区别是通过更改 DOM 树的方式而非执行 JavaScript 代码的方式进行攻击。 XSS Payload # 窃取 Cookie # 最常见的 XSS Payload 就是读取浏览器的 cookie 对象：
var img = document.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/3.%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/3.%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf/</guid><description>跨站点请求伪造 CSRF # CSRF: Cross Site Request Forgery
CSRF 的防御 # 验证码 # CSRF 攻击的过程，往往是在用户不知情的情况下构造了网络请求。因此在通常情况下，验证码能够很好地遏制 CSRF 攻击。
但是验证码并非万能。很多时候，处于用户体验考虑，网站并不能给所有的操作都加上验证码。
Refer Check # Refer Check 在互联网中最常见的应用就是防止图片盗链：
盗链：服务商自己不提供服务的内容，通过技术手段绕过其它有利益的最终用户界面（如广告），直接在自己的网站上向最终用户提供其它服务提供商的服务内容，骗取最终用户的浏览和点击率。 通过同样的原理，Refer Check 也可以用于检查请求是否来自合法的 “源”。
即使我们能够通过检查 Refer 是否合法来判断用户是否被 CSRF 攻击，也仅仅是满足了防御的充分非必要条件。Refer Check 的缺陷在于，服务器并非任何时候都能取到 Refer。很多时候处于隐私考虑、或者是浏览器限制了 Refer 的发送。
因此我们无法依赖 Refer Check 作为防御 CSRF 的主要手段。但是我们可以用它监控 CSRF 攻击的发生。
Anti CSRF Token # CSRF 为什么可以攻击成功呢？
其本质原因是，重要操作的所有参数都是可以被攻击者猜测的。攻击者只有预测除了 URL 的所有参数与参数值，才能成功地构造一个伪造的请求。 处于这个原因我们可以使用一些随机数把参数加密，使攻击者无法猜测到参数值。 这种方式就叫做 Anti CSRF Token。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/4.%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81clickjacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/4.%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81clickjacking/</guid><description>点击劫持 Click Jacking # 防御 Click Jacking # frame busting # 通常可以写一段 JavaScript 代码，以禁止 iframe 的嵌套。这种方法叫做 frame busting。比如：
if (top.location != location) top.location = self.location 但是这种方法也存在一些缺陷，因为它是用 JavaScript 写的，控制能力并不是特别强，因此有许多方法可以绕过它。比如上面的方法就可以用嵌套多个 iframe 的方法绕过：
Attacker top frame: # 自学笔记 (pdf) &amp;lt;iframe src=&amp;#34;attacker2.html&amp;#34;&amp;gt; Attacker sub-frame: &amp;lt;iframe src=&amp;#34;http://victim.com&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/iframe&amp;gt; X-Frame-Options # 因为 frame busting 存在被绕过的可能，所以我们需要更好的方法。一个比较好的方案是使用一个 HTTP 请求头——X-Frame-Options，这个请求头可以说是为了解决 Click Jacking 而生的。
当这个值为 DENY 时，浏览器会拒绝当前页面加载任何 frame 页面；
若值为 SAMEORIGIN 时，则可以定义允许 frame 加载的页面地址。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/5.html5%E5%AE%89%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/1.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/5.html5%E5%AE%89%E5%85%A8/</guid><description>HTML5 安全 # 佘崧林认为这已经是一个过时的概念了。</description></item></channel></rss>