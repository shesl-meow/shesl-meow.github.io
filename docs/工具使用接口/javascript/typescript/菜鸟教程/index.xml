<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>菜鸟教程 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/</link><description>Recent content in 菜鸟教程 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/1.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/1.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid><description>内置类型 # 类型是 TypeScript 相较于 JavaScript 增加的特性，也是 TpyeScript 的重点内容。
变量声明 # 声明变量的类型及初始值：
var [变量名] : [类型] = 值; **注意：**变量不要使用 name 否则会与 DOM 中的全局 window 对象下的 name 属性出现了重名。
类型断言（C++ 中的强制类型转换，但并不完全是）：
&amp;lt;类型&amp;gt; 值 值 as 类型 当 S 类型是 T 类型的子集，或者 T 类型是 S 类型的子集时，S 能被成功断言成 T。这是为了在进行类型断言时提供额外的安全性，完全毫无根据的断言是危险的，如果你想这么做，你可以使用 any。
它之所以不被称为类型转换，是因为转换通常意味着某种运行时的支持。但是，类型断言纯粹是一个编译时语法，同时，它也是一种为编译器提供关于如何分析代码的方法。
类型推断（C++ 中的 auto）：使用 var 关键字。
Any 类型 # 任意值是 TypeScript 针对编程时类型不明确的变量使用的一种数据类型，类型核心在于不在编译时进行类型检查。
let x: any = 1; x = &amp;#39;I am who I am&amp;#39;; // 正确，Any 可以指向任意类型 x.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/2.%E6%8E%A7%E5%88%B6%E6%B5%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/2.%E6%8E%A7%E5%88%B6%E6%B5%81/</guid><description>控制流 # 条件判断 # 循环 # 函数 # 参数类型 # 函数可以指定返回值类型与参数类型，比如：
function add(x: number, y: number): string { // ... } 上面定义的是两个 number 类型为参数，一个 string 类型为返回值的函数。 函数重载 # 可以通过参数类型对相同函数名进行重：
function disp(string):void; function disp(number):void;</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/3.%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/3.%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/</guid><description>内置类型 # Number # 概述 # TypeScript 与 JavaScript 类似，支持 Number 对象。Number 对象是原始数值的包装对象。
对象属性 # Number 对象支持的属性：
MAX_VALUE、MIN_VALUE、NaN、NEGATIVE_INFINITY、POSITIVE_INFINITY prototype、constructor； 对象方法 # 序号 方法 &amp;amp; 描述 1. toExponential()：把对象的值转换为指数计数法。 2. toFixed()：把数字转换为字符串，并对小数点指定位数。 3. toLocaleString()：把数字转换为字符串，使用本地数字格式顺序。 4. toPrecision()：把数字格式化为指定的长度。 5. toString()：把数字转换为字符串，使用指定的基数。数字的基数是 2 ~ 36 之间的整数。若省略该参数，则使用基数 10。 6. valueOf()：返回一个 Number 对象的原始数字值。 String # 对象属性 # String 对象支持的属性：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/4.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/4.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid><description>面向对象 # 接口 # TypeScript 接口定义如下：
interface RunOptions { program:string; commandline:string[]|string|(()=&amp;gt;string); } 在 Interface 中定义方法：
interface IEmployee { getSalary: (number) =&amp;gt; number; // arrow function getManagerName(number): string; } Interface 可以定义方法类型。
继承使用关键字 extends，单接口继承语法格式：
Child_interface_name extends super_interface_name 多接口继承语法格式：
Child_interface_name extends super_interface1_name, super_interface2_name,…,super_interfaceN_name 类 # 定义类的关键字为 class，后面紧跟类名，类可以包含以下几个模块（类的数据成员）：
字段：字段是类里面声明的变量。字段表示对象的有关数据。 构造函数：类实例化时调用，可以为类的对象分配内存。 方法：方法为对象要执行的操作。 比如：
class Car { // 字段 engine:string; // 构造函数 constructor(engine:string) { this.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/5.%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/javascript/typescript/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/5.%E6%A8%A1%E5%9D%97/</guid><description>模块 # 导出模块 # 模块导出使用关键字 export 关键字，语法格式如下：
// SomeInterface.ts export interface SomeInterface { // 代码部分 } 要在另外一个文件使用该模块就需要使用 import 关键字来导入:
import someInterfaceRef = require(&amp;#34;./SomeInterface&amp;#34;); 声明文件 # 常见到的 .d.ts 结尾的文件就是声明文件。
在这个文件中使用 export module 语法或者 export namespace 语法，在项目的其他地方进行引用时，就可以不需要引用完整路径进行引用，比如：
// dec.d.ts declare module &amp;#34;Dec&amp;#34; // ref.ts import * as des from &amp;#34;Dec&amp;#34;; TypeScript 作为 JavaScript 的超集，在开发过程中不可避免要引用其他第三方的 JavaScript 的库。虽然通过直接引用可以调用库的类和方法，但是却无法使用TypeScript 诸如类型检查等特性功能。
为了解决这个问题，需要将这些库里的函数和方法体去掉后只保留导出类型声明，而产生了一个描述 JavaScript 库和模块信息的声明文件。通过引用这个声明文件，就可以借用 TypeScript 的各种特性来使用库文件了。
比如使用 jQuery，我们需要使用 declare 关键字来定义它的类型，帮助 TypeScript 判断我们传入的参数类型对不对：</description></item></channel></rss>