<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/</link><description>Recent content in C# on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/1.%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/1.%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</guid><description>C# 简介 # 通过菜鸟教程学习：
https://www.runoob.com/csharp/csharp-intro.html C# 提供的一些功能如下：
布尔条件（Boolean Conditions） 自动垃圾回收（Automatic Garbage Collection） 标准库（Standard Library） 组件版本（Assembly Versioning） 属性（Properties）和事件（Events） 委托（Delegates）和事件管理（Events Management） 易于使用的泛型（Generics） 索引器（Indexers） 条件编译（Conditional Compilation） 简单的多线程（Multithreading） LINQ 和 Lambda 表达式 集成 Windows</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/2.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/2.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid><description>基本语法 # 数据类型 # 在 C# 中，变量分为以下几种类型：值类型（Value types）、引用类型（Reference types）、指针类型（Pointer types）
值类型 # 值类型都是从类 System.ValueType 中派生的。值类型直接用来存储数据。
下面是常见的值类型：
类型 描述 范围 默认值 bool 布尔值 True 或 False False byte 8 位无符号整数 0 到 255 0 char 16 位 Unicode 字符 U +0000 到 U +ffff &amp;lsquo;\0&amp;rsquo; decimal 128 位精确的十进制值，28-29 有效位数 (-7.9 x 1028 到 7.9 x 1028) / 100 到 28 0.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/c#/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</guid><description>参考文档：
https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-restore
https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-msbuild
从零开始 # 如何从零开始，使用命令行构建并运行一个 C# 的项目，并且运行一个程序？
项目结构 # 运行一个项目至少需要一个 xml 格式的项目文件 {项目名}.csproj 和一个源代码文件 {文件名}.cs。了解这个，有助于我们使用 git 管理自己的项目代码。
我们在 Visual Studio 里面创建一个 .Net 在 Windows 上的桌面控制台应用。
下面是官方默认生成的 HelloWorld.csproj：
&amp;lt;Project Sdk=&amp;#34;Microsoft.NET.Sdk&amp;#34;&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt; &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;/Project&amp;gt; 这个是项目的配置信息 上面这个 xml 指明了项目使用的 SDK（Microsoft.NET.Sdk）、输出的文件类型（可执行 exe 文件）、.NET 版本。 下面是官方默认生成的 Program.cs：
using System; namespace HelloWorld { class Program { static void Main() { Console.</description></item></channel></rss>