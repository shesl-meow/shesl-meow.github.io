<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/</link><description>Recent content in Tutorial on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial01/</guid><description>学习网址：https://www.djangoproject.com/start/
Tutorial01 # 使用 Django，请配置 Python3.5 及以上环境，查看 Python 版本请使用以下命令：
$ python --version 本 tutorial 建立在已经安装 Django 环境的基础上，Django 是 Python 的一个模块，可以通过以下命令安装：
$ pip install django 可以通过以下命令检测 Django 是否已经安装：
$ python -m django --version # 已经安装返回版本号，未安装返回 No module named django. Createing a project # 第一次使用 Django，先进行初始化，使用 cd （change directory）命令到工作到目标文件夹，使用以下命令在当前文件夹下创建一个新的 Django 项目：
$ django-admin startproject mysite PostScript: 项目的名称不应该与被 Python 或 Django 占用的关键词重合，比如：django 或 test 。
上述命令会自动生成以下文件，文件功能解释：
manage.py：Django 提供的与项目进行交互的一个 Python 脚本文件，详细信息。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial02/</guid><description>Tutorial02 # Database setup # 打开 mysite/settings.py，这是一个 Python 的模块变量，表示着 Django 的设置。
Django 的数据库默认使用 SQLite，如果想使用其他 DBMS，需要更改 DATABASES 这个 Python 字典中，'default' 键值对应的字典，进行以下设置：
&amp;lsquo;default&amp;rsquo; 字典键 &amp;lsquo;default&amp;rsquo; 字典可能值 'ENGINE' 'django.db.backends.sqlite3', 'django.db.backends.postgresql','django.db.backends.mysql', 'django.db.backends.oracle' , etc 'NAME' 数据库的名称，如果使用 sqlite，则为文件的路径 'USER' 登录数据库的用户名，非 sqlite 数据库必须添加 'PASSWORD' ##登录数据库用户名对应的密码，非 sqlite 数据库必须添加 'HOST' 连接数据库的主机名，sqlite 数据库不需声明，空字符串表示 'localhost' mysite/settings.py 中 TIME_ZONE 变量可以用于设置时区。
mysite/settings.py 中 INSTALLED_APPS 表示项目中所有应用的名字，默认情况下，包括了以下来自 Django 的 apps：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial03/</guid><description>Tutorial03 # Overview # Django 中定义了一个特殊的对象，称作 view，它抽象地对应着一个网页，Django 通过一个函数来抽象表示一个 view。同时 Django 提供了叫做 URLconfs 的东西，会将一个个 URL 模式字符串一一对应到每一个 view 中。
Writing more view # 我们可以在 polls/views.py 中加入以下代码：
def detail(request, question_id): return HttpResponse(&amp;#34;You&amp;#39;re looking at question %s.&amp;#34; % question_id) def results(request, question_id): response = &amp;#34;You&amp;#39;re looking at the results of question %s.&amp;#34; return HttpResponse(response % question_id) def vote(request, question_id): return HttpResponse(&amp;#34;You&amp;#39;re voting on question %s.&amp;#34; % question_id) 然后将以下代码添加到 polls/urls.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial04/</guid><description>Tutorial04 # Write a simple form # 我们可以在之前编写的 html 文件的模板中加入 &amp;lt;form&amp;gt; 元素，以便我们后续的研究：
&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt; {% if error_message %}&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ error_message }}&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;{% endif %} &amp;lt;form action=&amp;#34;{% url &amp;#39;polls:vote&amp;#39; question.id %}&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; {% csrf_token %} {% for choice in question.choice_set.all %} &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;choice&amp;#34; id=&amp;#34;choice{{ forloop.counter }}&amp;#34; value=&amp;#34;{{ choice.id }}&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;choice{{ forloop.counter }}&amp;#34;&amp;gt;{{ choice.choice_text }}&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; {% endfor %} &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Vote&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; 以上的代码大致意思是在提交表单后，会连接到 polls 这个应用中，名为 vote 的 urlpattern，因此你需要在文件 User/urls.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/tutorial/tutorial05/</guid><description>Tutorial05 # Introducing automated testing # 自动化测试：
测试可以节省你的时间 测试不仅仅可以发现问题，还能防止问题 测试使你的代码更受欢迎 测试有助于团队合作 Writing our first test # 1. identify a bug # onfirm the bug by using the shell to check the method on a question whose date lies in the future:
$ python manage.py shell &amp;gt;&amp;gt;&amp;gt; import datetime &amp;gt;&amp;gt;&amp;gt; from django.utils import timezone &amp;gt;&amp;gt;&amp;gt; from polls.models import Question &amp;gt;&amp;gt;&amp;gt; # create a Question instance with pub_date 30 days in the future &amp;gt;&amp;gt;&amp;gt; future_question = Question(pub_date=timezone.</description></item></channel></rss>