<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/</link><description>Recent content in Django on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/admin-site/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/admin-site/</guid><description>官方文档：https://docs.djangoproject.com/en/2.1/ref/contrib/admin/
Django admin site # Overview # If you’re not using the default project template, here are the requirements:
Add 'django.contrib.admin' and its dependencies -django.contrib.auth, django.contrib.contenttypes,django.contrib.messages, and django.contrib.sessions - to yourINSTALLED_APPS setting. Configure a DjangoTemplates backend in your TEMPLATES setting withdjango.contrib.auth.context_processors.auth anddjango.contrib.messages.context_processors.messages in the 'context_processors' option of OPTIONS. If you’ve customized the MIDDLEWARE setting,django.contrib.auth.middleware.AuthenticationMiddlewareand django.contrib.messages.middleware.MessageMiddlewaremust be included. Hook the admin’s URLs into your URLconf. If you need to create a user to login with, use the createsuperuser command.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/authentication-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/authentication-system/</guid><description>学习网址：
https://www.jianshu.com/p/17d4c2182ef7 http://www.liujiangblog.com/course/django/178 https://docs.djangoproject.com/en/1.11/topics/auth/ https://juejin.im/post/5987f51e51882549475a916d 官方的参考文档：https://docs.djangoproject.com/zh-hans/2.1/ref/contrib/auth/
Authentication System # Using the Django authentication system # User Object # User 是 Django 提供的一个对象，默认对象的主要属性是：username，password，email，first_name，last_name。参阅完整的文档：
关于 User 模块的操作（比如：使用 create_user() 函数创建对象）
from django.contrib.auth import get_user_model from django.contribute.auth.models import User # 导入 User 这个模块有以上两种方法 User = get_user_model() # 该行获得 User 这个模块，与导入的 User 指向同一个模块 Rookie_User = User.objects.create_user(&amp;#39;Rookie&amp;#39;, &amp;#39;email@e.com&amp;#39;, &amp;#39;passwd&amp;#39;) Rookie_User = User.objects.create(username=&amp;#34;Rookie001&amp;#34;) # 创建一个名为 ‘Rookie001’ 的 User 对象，返回该对象 User.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/guardian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/guardian/</guid><description>项目地址：https://github.com/django-guardian/django-guardian
官方文档：https://django-guardian.readthedocs.io/en/stable/
中文介绍：https://www.jianshu.com/p/404fd39d5efc
django-guardian # django-guardian 是一个对象权限的框架。
对象权限是一种对象颗粒度上的权限机制，它允许为每个具体对象授权。
Django 其实包含了 object permission 的框架，但没有具体实现，object permission 的实现需要借助第三方 appdjango-guardian**，**我们在开发中用调用 django guradian 封装好的方法即可。
Tutorial # 安装：
$ pip install django-guardian 配置：
在 INSTALLED_APPS 中添加一个该模块：
INSTALLED_APPS = ( ... &amp;#39;guardian&amp;#39;, ) 在 settings.py 中新添加一个数据 AUTENTICATION_BACKENDS：
AUTHENTICATION_BACKENDS = ( &amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;, # default &amp;#39;guardian.backends.ObjectPermissionBackend&amp;#39;, ) 然后生成 guardian 的数据表：
$ python manage.py migrate 给对象赋权：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/python/django/signals/</guid><description>Django Signals # Built-in Signals # Django provides a set of built-in signals that let user code get notified by Django itself of certain actions. These include some useful notifications:
django.db.models.signals.pre_save &amp;amp; django.db.models.signals.post_save
Sent before or after a model’s save() method is called.
django.db.models.signals.pre_delete &amp;amp; django.db.models.signals.post_delete
Sent before or after a model’s delete() method or queryset’s delete() method is called.
django.db.models.signals.m2m_changed
Sent when a ManyToManyField on a model is changed.</description></item></channel></rss>