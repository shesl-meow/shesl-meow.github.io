<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Runtime on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/</link><description>Recent content in Runtime on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/1.%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/1.%E7%AE%80%E4%BB%8B/</guid><description>参考资料：
https://halfrost.com/objc_runtime_isa_class/ https://en.wikipedia.org/wiki/Runtime_library 简介 # 什么是 Runtime # Runtime 顾名思义是运行时的意思，也就是指程序运行的时候。
对于动态语言来说，通常会有很多需要运行时才可以确定的特性，比如：Objective-C 中的消息转发机制、Python 中的变量类型机制等。实现这些动态功能的函数通常被封装成一个库，称作为运行时库。
这里要讲的 Objective-C 的 Runtime 就是 OC 的运行时库。
Objective-C 的 Runtime # Objective-C 有一些动态特性需要运行时库来完成：
类的方法调用、消息转发是间接的：传统的函数一般在编译时就已经把参数信息和函数实现打包到编译后的源码中了；在 OC 中，调用一个实例的方法，所做的是向该实例的指针发送消息，实例在收到消息后，从自身的实现中寻找响应这条消息的方法。
类是动态创建的：持有方法、方法实现、协议等，都是在创建的时候绑定在对象上的；
简单的可以简化成 Runtime 管理的都是 id（id 的本质其实是 objc_object, objc_class 头部其实就是 id, 也就是isa）。
Objective-C 的编译运行结构大致如下：
+--------------------------------------+ | objective-C source code | | +-------------------+-------------+ | | Framework&amp;amp;Service | Runtime API | +----+-------------------+-------------+ | compiler | +--------------------------------------+ | Runtime System Library | +--------------------------------------+ Objective-C 的代码与 Runtime 的交互发生在以下的三个情况下：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>参考：
https://halfrost.com/objc_runtime_isa_class/ http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html https://draveness.me/method-struct NSObject # NSObject 协议中定义的多种方法，是 OC 代码与 Runtime 发生交互的重要位置。
NSObject 基类 # 这个类与 NSObject 协议定义在了一个文件 Public Headers/NSObjects.h 中：
OBJC_ROOT_CLASS OBJC_EXPORT @interface NSObject &amp;lt;NSObject&amp;gt; { Class isa OBJC_ISA_AVAILABILITY; } 其中：
OBJC_ROOT_CLASS 是一个宏：
#if !defined(OBJC_ROOT_CLASS) # if __has_attribute(objc_root_class) # define OBJC_ROOT_CLASS __attribute__((objc_root_class)) # else # define OBJC_ROOT_CLASS # endif #endif 它为 NSObject 这个类附加了 objc_root_class 这个属性，这是 GNU C 的特性，见：Attribute
OBJC_EXPORT 也是一个宏，它标记了这个类可以被任意外部位置访问到；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/3.%E7%BC%96%E8%AF%91%E7%BB%93%E6%9E%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/3.%E7%BC%96%E8%AF%91%E7%BB%93%E6%9E%9C/</guid><description>参考资料：
深入剖析-iOS-编译-Clang&amp;mdash;LLVM https://kingcos.me/posts/2019/objects_in_obj-c/ 编译结果 # clang # 我们都知道 Objective-C 是 C++ 的超集。Objetive-C 的代码在编译阶段，先会 clang 被编译为 C++ 代码，然后在 Runtime 上运行。
利用 clang 在命令行里编译 Objective-C 的命令：
# ARC $ clang -fobjc-arc -framework Foundation main.m -o main # MRC $ clang -fno-objc-arc -framework Foundation main.m -o main 我们使用下面的示例程序，来查看 clang 的编译结果：
#import &amp;lt;Foundation/Foundation.h&amp;gt; @interface SheslClass : NSObject { NSNumber *sheslVarNumber; } @property (nonatomic, copy) NSString *sheslPropertyString; + (void)sheslClassMethod; - (NSNumber *)getSheslVarNumber; @end @implementation SheslClass + (void)sheslClassMethod { NSLog(@&amp;#34;Hello World&amp;#34;); } - (NSNumber *)getSheslVarNumber { return sheslVarNumber; } @end int main(int argc, char * argv[]) { [SheslClass sheslClassMethod]; SheslClass *sheslClass = [[SheslClass alloc] init]; return 0; } 我们可以手动将 Objetive-C 代码编译为 C++ 代码：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/swizzling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3/ios/runtime/swizzling/</guid><description>Method Swizzling #</description></item></channel></rss>