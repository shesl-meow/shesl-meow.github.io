<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>公钥密码体制 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/</link><description>Recent content in 公钥密码体制 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/diffiehellman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/diffiehellman/</guid><description>Diffie Hellman Key Exchange # DH：DH 密钥交换用于在公开信道上共享私密信息
算法的流程 # 系统参数 # 系统的运行需要确定以下两个参数：
一个大素数 p； 一个整数 g； 信息生成 # 进行信息交换的双方需要确定以下的信息：
双方分别生成两个秘密信息 $$X_A, X_B$$ 通过秘密信息与整数 g 计算：$$g^{X_A}, g^{X_B}$$ 秘密共享 # 收到公开信道的信息的双方进行以下操作：
A 计算得到秘密共享信息：$$s = (g^{X_B})^{X_A} = g^{X_AX_B}$$ B 计算得到秘密共享信息：$$s = (g^{X_A})^{X_B} = g^{X_AX_B}$$ 流程图 #</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/elgamal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/elgamal/</guid><description>参考：
https://resources.saylor.org/wwwresources/archived/site/wp-content/uploads/2011/03/ElGamal-signature-scheme.pdf ElGamal signature scheme # 算法的流程 # 系统参数 # 系统需要一下在各个使用这个系统的使用者之间共享三个信息：
H 是一个抗碰撞的哈希函数； p 是一个大素数，解决 p 的离散对数问题是困难的。 g 是在乘法群 $$\Z^*_p$$ 中随机选取的生成元。 密钥生成 # 签名者需要通过这个系统对一个消息进行签名，需要生成以下的信息：
随机选取的整数 x 满足 $$1 &amp;lt; x &amp;lt; p-1$$ 计算以下信息：$$y \equiv g^x \pmod{p}$$ 封装公钥：$$(y)$$；封装私钥 $$(x)$$ 签名过程 # 签名者通过以下的方式对消息进行签名：
随机选取一个整数 k 满足 $$0 &amp;lt; k &amp;lt; p-1 \and gcd(k, p-1) = 1$$ 计算 $$r = g^k \pmod{p}$$ 计算 $$s = (H(m) - xr)k^{-1} \pmod{p-1}$$（即 s 满足 $$H(m) = xr + ks \pmod{p-1}$$） 如果计算得到 s=0，则重新选取随机数 k。 封装 $$(r, s)$$ 即是拥有私钥 x 的签名者对信息 m 的签名。 验证签名 # 验证一个签名的流程如下：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/ellipticcurve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/ellipticcurve/</guid><description>Elliptic Curve DSA # Elliptic Curve # 系统参数 # 如何确定一个 ECC：
选择一个素数 p 和一个整数 n。从有限域 $$\mathbb{F}p$$ 中选择一个次数为 n 不可约多项式 f(x)，并且用这个不可约多项式得到一个有限域 $$\mathbb{F}{p^n}$$，设 f(x) 在该有限域下的根为 $$\alpha$$；
在有限域 $$\mathbb{F}_{p^n}$$ 中生成一个非超奇异（non-supersingular）曲线 E；
在 E 上选择一个阶为素数的点 $$P=(x,y)$$，设其阶为 q；
定义一个转化函数 $$c(x): \mathbb{F}{p^n} \rightarrow \Z{p^n}$$。具体的定义为：
$$\displaystyle c(x) = \sum_{i=0}^{n-1} c_i p^i \in \Z_{p^n}, \text{for } x= \sum_{i=0}^{n-1}c_i \alpha^i \in \mathbb{F}_{p^n}, 0 \le c_i &amp;lt; p$$
域上的运算 # DSA 签名算法 # 系统参数 # 系统需要初始化以下信息供所有系统的使用者共享：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/ntru/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/ntru/</guid><description>参考：
http://people.scs.carleton.ca/~maheshwa/courses/4109/Seminar11/NTRU_presentation.pdf NTRU Cryptosystem # NTRU: Nth degree Truncated polynomial Ring Units. Or $$\displaystyle R = \frac{Z[X]}{X^{N-1}}$$
算法的流程 # 系统参数 # 系统需要一下在各个使用这个系统的使用者之间共享三个信息：
N&amp;amp;R：N 是一个整数、R 是一个环，在环 R 上的多项式次数均为 N-1； p：一个小整数。多项式对 p 系数取模得到一个模环； q：一个与 p 互素的大整数。多项式对 q 系数取模得到一个模环； 密钥生成 # 使用这个系统的用户需要通过一下的方式生成公钥与私钥：
从 R 中随机选取两个可逆多项式 f, g；
计算 f 关于 p,q 的逆：$$f \cdot f_p \equiv 1 \pmod{p}, f \cdot f_q \equiv 1 \pmod{q}$$</description></item></channel></rss>