<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>线性代数-MIT18.06 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/</link><description>Recent content in 线性代数-MIT18.06 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/1.%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E5%87%A0%E4%BD%95%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/1.%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E5%87%A0%E4%BD%95%E8%A7%A3/</guid><description>1. 方程组的几何解 # Linear equations can be written as $$A \times X = B$$
Find linear combination of columns (x&amp;rsquo;s coefficient vector, and y&amp;rsquo;s ciefficient vector);
任何一个线性方程可以从两个视角了解它：
Row Picture：将每单个方程视作为空间中的某个点集，求方程的解即位求点集的交点； Column Picture：将每个未知元在各个方程中的系数，视作一个向量，求方程的解即求这些向量的线性组合； 在用未知数系数向量的思维解决问题时，我们可能会思考以下问题：
有没有一种通用的方法能够得到方程的解？ 有没有一种方法能够判断方程组的条件是否足够，即原方程是否有解？ 矩阵乘法的理解方式有两种：
通俗的点乘理解； 矩阵的每个列都是一个向量，矩阵乘以一个向量，可以理解为矩阵的列向量的线性组合。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/2.%E7%9F%A9%E9%98%B5%E6%B6%88%E5%85%83%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/2.%E7%9F%A9%E9%98%B5%E6%B6%88%E5%85%83%E6%B3%95/</guid><description>2. 矩阵消元法 # 矩阵消元法与行列式一样都是可以用于解决方程组的方式。
矩阵消元法的步骤如下：
考虑系数矩阵，按行自上而下通过与之前行的加减法运算，将 pivot（对角线上的元素）左侧的所有元素运算为 0；运算结束后可以得到一个上三角矩阵，记为 U； 对右侧向量做相同的运算，按行自下而上回带计算可以得到所有的未知数； 概念增广矩阵（augmented matrix）：考虑所有系数和结果向量的一个大矩阵；
Simple operation of matrix:
Matrix * Vector: Result in a column, linear combination of the columns of the matrix; Vector * Matrix: Result in a row, linear combination of the rows of the matrix; 矩阵消元法中的步骤，行之间的“加减法运算”就可以用矩阵乘法表示。比如某一个操作“将第二行减去第一行的 3 倍”，这一操作就可以用这样一个矩阵表示：$$\pmatrix{1 &amp;amp;0 &amp;amp;0 \ -3 &amp;amp;1 &amp;amp;0 \ 0 &amp;amp;0 &amp;amp;1}$$，它的含义为：
第一行保持不变，即线性组合 $$ 1 * row_1 + 0 * row_2 + 0 * row_3 $$； 第二行减去第一行的三倍，即线性组合 $$-3 * row_1 + 1 * row_2 * 0 * row_3$$； 第三行保持不变，即线性组合 $$0 * row_1 + 0 * row_2 + 1 * row_3$$ 矩阵乘法运算的重要性质：不满足交换律、满足结合律；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/3.%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E5%92%8C%E9%80%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/3.%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E5%92%8C%E9%80%86/</guid><description>3. 矩阵乘法和逆 # 乘法 # 矩阵乘法的规则，对于运算 $$A * B = C$$：
C 中的元素值 $$C_{ij} = \sum_{k = 1}^n A_{ik} * B_{kj}$$；
乘法可以运算的前提条件：A 的列数等于 B 的行数；
其他理解矩阵乘法的方式：
C 中的任意一行：B 的所有行的线性组合； C 中的任意一列：A 的所有列的线性组合； C 是：“A 的所有列与B 的所有行的乘积”的和； 分块乘法：$$\pmatrix{A_1 &amp;amp;A_2 \ A_3 &amp;amp;A_4} * \pmatrix{ B_1 &amp;amp;B_2 \ B_3 &amp;amp;B_4 } = \pmatrix{A_1B_1 + A_2B_3 &amp;amp;A_1B_2 + A_2B_4 \ A_3B_1 + A_4B_3 &amp;amp;A_3B_2 + A_4B_4}$$</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/4.%E7%9F%A9%E9%98%B5%E7%9A%84lu%E5%88%86%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/4.%E7%9F%A9%E9%98%B5%E7%9A%84lu%E5%88%86%E8%A7%A3/</guid><description>矩阵的LU分解 # AB 的逆：$$B^{-1} A^{-1}$$
转置的逆，$$A^T$$ 的逆是 $$(A^{-1})^T$$
矩阵的 LU 分解：
任意一个矩阵 A 表示一定可以表示为两个矩阵 L、U 的乘积，其中 L 是一个下三角矩阵、 U 是一个上三角矩阵； 消元法中，已经知道：
矩阵 A 可以通过左乘若干个行变化操作矩阵，可以得到一个上三角矩阵，即 $$E_{n(n-1)}\cdots E_{21}A = U$$；
由上面的公式可以得到：$$L = E_{21}^{-1} \cdots E_{n(n-1)}^{-1}$$，是一个下三角矩阵；
对于每一个行操作的逆也是很好求的，它的对角线是 1，一个位置有操作数 x，其他位置都是 0，它的逆就是将对应位置的操作数改写成 -x 即可；
这个方法需要的时间复杂度是 $$O(n^2 \cdot n)$$
Permutation Matrix:
For matrix size $$n \times n$$, there are $$n!$$ different permutation matrices; Mutiplation of two permutation matrix will result in a permutation matrix; Inverse of permutaion matrix: $$P^{-1} = P^{T}$$ 上面的 A=LU 公式分解中存在一个问题：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/5.%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/5.%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/</guid><description>矩阵的转置 # 什么是转置（Transpose）：
对于 A 的转置矩阵 $$A^T$$，其中的元素满足 $$(A^T){ij} = A{ji}$$ 对称矩阵（Symmetric Matrix）：满足 $$A^T = A$$ 条件的矩阵
有趣的性质：
矩阵和他转置的积是对称矩阵，即 $$(AA^T)^T = AA^T$$。</description></item></channel></rss>