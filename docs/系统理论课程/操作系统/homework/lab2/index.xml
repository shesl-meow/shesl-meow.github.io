<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lab2 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/homework/lab2/</link><description>Recent content in lab2 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/homework/lab2/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/homework/lab2/exe0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/homework/lab2/exe0/</guid><description>exe0 # 概述 # 首先我们看看 lab1 与 lab2 的代码有什么不同：
在 ucore_os_lab 这个项目中添加不同的 repo，用以回滚到最原始的版本：
$ git remote -v origin https://github.com/chyyuu/ucore_os_lab.git (fetch) origin https://github.com/chyyuu/ucore_os_lab.git (push) $ git remote add upstream https://github.com/chyyuu/ucore_os_lab $ git remote -v origin https://github.com/chyyuu/ucore_os_lab.git (fetch) origin https://github.com/chyyuu/ucore_os_lab.git (push) upstream https://github.com/chyyuu/ucore_os_lab (fetch) upstream https://github.com/chyyuu/ucore_os_lab (push) 拉取主仓中最新的代码，并且切换到远程的 master 分支：
$ git pull upstream master From https://github.com/chyyuu/ucore_os_lab * branch master -&amp;gt; FETCH_HEAD * [new branch] master -&amp;gt; upstream/master Already up to date.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/homework/lab2/exe2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/homework/lab2/exe2/</guid><description>exe2 # 概述 # 通过设置页表和对应的页表项，可建立虚拟内存地址和物理内存地址的对应关系。其中的 get_pte 函数是设置页表项环节中的一个重要步骤。此函数找到一个虚地址对应的二级页表项 的内核虚地址，如果此二级页表项不存在，则分配一个包含此项的二级页表。
本练习需要补全kern/mm/pmm.c 文件中的 get_pte 函数，实现其功能。请仔细查看和理解 get_pte 函数中的注释。
函数原型如下：
pte_t *get_pte(pde_t *pgdir, uintptr_t la, bool create); 我们先来翻译一下这个函数的注释：
函数 get_pte 的相关注释：
作用：通过页目录项和逻辑地址，取得对应的页表；如果页表不存在则会分配这个页表； 参数：pgdir：页目录项；la：逻辑地址；create：是否创建新的页表； 返回值：内核对应页表的虚拟地址。 在对应的头文件 pmm.h 与 mmu.h 中，定义了一些你可能会用到宏和函数：
PDX(la)：通过一个进程的虚拟逻辑地址，求得一个页目录项的索引； PTX(la)：通过一个进程的虚拟逻辑地址，求得一个页表项的索引； KADDR(pa)：通过一个物理地址，返回一个对应的内核虚拟地址； set_page_ref(page, 1)：将页的引用计数加一； page2pa(page)：通过一个页表项，得到它实际的物理地址； struct Page * alloc_page()：分配一个内存页； memset(void *s, char c, size_t n)：将指针 s 之后的 n 个区域的内容设置为 c； PTE_P：存在；PTE_W：写；PTE_U：读。 问题一 # 请描述页目录项 (Page Directory Entry) 和页表 (Page Table Entry) 中每个组成部分的含义和以及对 ucore 而言的潜在用处。</description></item></channel></rss>