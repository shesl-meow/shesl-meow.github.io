<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>高效能团队模式 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 高效能团队模式 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/1.%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E7%9A%84%E9%99%B7%E9%98%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/1.%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E7%9A%84%E9%99%B7%E9%98%B1/</guid><description>第一章 组织结构的陷阱 # 核心观点 # 作为管理接口的技术人员，我们必须改变之前的思想。
不再将团队视作为一组可替换的个体，它们只要沿用“正确”的流程和使用“正确”的工具就能获得成功；
而是将人员和技术视作为社会技术生态系统中的一份子，正如计算芯片中的碳和硅一样；
组织结构和实际的工作方式之间存在出入：
人们为了完成工作，通常会与另一条汇报线上的人员进行横向或纵向沟通； 组织应该有意识地培养这种创造力和解决问题的能力，并从中受益，而不仅仅局限于自顶向下和自底向上的沟通和汇报； 每个组织都存在三种组织结构（知识型组织成功的关键在于后两者）：
官方架构（组织结构图），促进合规性； 非正式架构，个体间的“影响范围”； 价值创造架构，工作是如何在个人间和团队间完成的； Naomi Stanford 总结的五条组织设计法则：
根据令人信服的理由来设计； 反馈：为设计决策提供开发选项； 选择正确的设计时机； 容错：寻找事务偏离轨迹的线索； 动态：对未来保持警惕； 团队拓扑是一种全新的团队思维模式：
它提供了四类基本团队类型：流动式团队、平台团队、赋能团队、复杂子系统团队； 以及三种核心的团队交互模式：协作模式、服务模式和促进模式； 康威定律：
Melvin E. Conway: Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization&amp;rsquo;s communication structure. Eric Raymond 给出了一个幽默而形象的例子：如果有四个小组合作开发一个编译器，那么你将得到一款具有四个步骤的编译器； 认知负荷：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/2.%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/2.%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B/</guid><description>第二章 康威定律为何如此重要 # 康威定律现代版本：
如果系统的架构和组织的架构不一致，那么组织架构将会成为赢家； 逆康威定律：
组织需要通过团队和组织结构的改进来实现预期的软件架构； 经过验证的软件架构良好实践：
松耦合：组建不强依赖于其他组件； 高内聚：组件拥有清晰的指责边界，并且它们的内部元素强相关； 清晰合理的版本兼容性； 清晰合理的跨团队测试； 小心那些流于表面的康威定律，错误地解读康威定律可能会带来风险：
工具：盲目地为整个组织选择单一的工具是不合适的，如果两个团队的职责边界没有交集，那么还坚持使用相同的工具就没有什么价值了。用一句话概括来说就是：独立团队使用独立工具，协作团队使用共享工具； 多组件团队：很多组织草率地按照康威定律建立了大量不同的组件团队来分别构建系统的各个小部分； 通过反复的组织结构调整来建立山头或减少人员；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/3.%E5%9B%A2%E9%98%9F%E4%BC%98%E5%85%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/3.%E5%9B%A2%E9%98%9F%E4%BC%98%E5%85%88/</guid><description>第三章 团队优先的思维方式 # 概述 # 现代复杂系统需要高效能团队，对于需要大量信息的知识密集型、问题解决型任务，一个有凝聚力的团队的表现要远远超出个人的集合；
依赖个体来理解和有效处理构建和演进现代软件所需要的信息量和信息的本质是不可持续的，团队活力远比谁在团队中更重要；
建设小而美的长期团队 # 团队规模：
本书中的团队定义：一个由 5-9 人组成的稳定小组，作为一个整体朝着共同的目标努力。我们不应该把工作指派给个人，而是指派给团队。 一个有效的团队最多由 7-9 人组成。 7-9 这一人数限制有着明确的理论基础：
Amazon 提出的 “两张披萨” 理论，即团队规模应该是两张披萨能够喂饱全体成员； 这一人数限制是 Scrum 框架推荐的，它源于对群体认知和信任的进化限制； 邓巴数字：15 是一个人可以信任的人数极限，其中只有 5 个人能够获得深入的了解和信任； 小规模团队带来信任。
工作流向长期团队：
团队需要时间磨合来实现高效，通常团队需要花 2 周到 3 个月甚至更长的时间来形成一个有凝聚力的集体； 提升团队存活周期的最佳办法就是提升团队稳定性。团队应该保持稳定，而非一成不变，仅在必要的时候进行偶尔的调整。 让团队对软件负责：
让一个团队负责系统或子系统； 需要明确的是：团队代码所有权划分并不是在划分地盘，团队对代码负责并维护，而不应该觉得代码是它们的而因此排斥其他人； 团队成员也需要具备团队优先的思维：
团队应该是交付的基础，而非个人； 即便通过引导，有的人依然不适合团队的工作，或者不愿意将团队的需求放在个人需求之上。这些人会影响团队工作，在极端场合下，甚至会摧毁团队； 在团队中拥抱多样性：
一点异质性会极大的帮助创建一个团队的团队； 奖励团队而非奖励个人。
良好设计的边界可以最小化认知负荷 # 约束团队职责以匹配团队认知负荷：
使用团队优先方法，团队的职责与团队所能处理的认知负荷是吻合的。 Sweller 定义了三种不同的认知负荷：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/4.%E9%9D%99%E6%80%81%E5%9B%A2%E9%98%9F%E6%8B%93%E6%89%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/4.%E9%9D%99%E6%80%81%E5%9B%A2%E9%98%9F%E6%8B%93%E6%89%91/</guid><description>静态团队拓扑 # 反模式 # 两种特别有代表性的反模式：
“临时起意”的团队设计：需要考虑交流成本； “频繁调动”团队成员：团队仅仅为了项目而组建，但是在项目完成之后就立即被打散。看起来这样体现了高度的灵活性，以及更快速地应对交付日期的响应能力，但是反复切换上下文的成本被低估； DevOps 拓扑反映了两个核心理念：
没有一种通用的组织架构方法来让 DevOps 获得成功； 部分拓扑是阻碍 DevOps 成功的反模式，它们忽略了甚至同 DevOps 的核心理念背道而驰； 其中第二点也就是说：并不存在所谓“正确”的团队拓扑，但在组织中存在很多“错误”的团队拓扑。
成功的模式 # 特性团队依赖于高度工程能力成熟度和互信：
特性团队往往需要修改多个代码库，这些代码库由不同组件团队管理；多个团队在同一个代码库中叠加地工作，会导致代码缺乏负责人，除非团队间遵循高度协作的规则； 随着业务发展，我们逐渐需要一些人考虑和维护整个系统，确保子系统可以融入整个系统，满足期待的用户体验、性能和可靠性。于是“系统架构师”、“系统负责人”、“集成经理”等角色应运而生。 产品团队需要支持系统：
团队保持自主性的关键在于不被外部依赖所阻碍，也就是说新 feature 不能够因为某些团队掌控范围之外的事情发生而处于停滞状态； 产品团队通常承担了巨大的快速交付压力，如果它们所使用的系统无法提供必要的自主性支持，那么就会导致日益增长的摩擦； 云团队无需创建应用基础设施：
“云团队”并不是换了一个名字的“基础设施团队”，他需要提供云服务带来的速度和扩展性； SRE (Site Reliability Engineering) 让扩展性成为可能性：
SRE 是 Google 创建的一种软件运维与改进方法，这个团队更加关注“错误预算（Error Budget）”和“服务等级目标（Service-Level Objectives, SLOs）” 它们有能力将低质量的软件回退给软件开发团队，团队成员需要优秀的软件编程能力； 选择团队拓扑需要考虑的因素 # 技术和文化成熟度。
组织大小、软件规模和工程能力成熟度：
组织大、能力成熟的团队：端对端和专职团队聚焦可用性； 组织大、能力不成熟的团队：端到端团队的常规协作； 组织小、能力成熟的团队：依赖于 PaaS 的专职团队； 组织小、能力不成熟的团队：专职团队间紧密合作； 拆分职能竖井：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/5.%E5%9B%9B%E7%B1%BB%E5%9F%BA%E6%9C%AC%E5%9B%A2%E9%98%9F%E6%8B%93%E6%89%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E9%AB%98%E6%95%88%E8%83%BD%E5%9B%A2%E9%98%9F%E6%A8%A1%E5%BC%8F/5.%E5%9B%9B%E7%B1%BB%E5%9F%BA%E6%9C%AC%E5%9B%A2%E9%98%9F%E6%8B%93%E6%89%91/</guid><description>四类基本团队拓扑 # 本书的核心是定义了四类基本团队拓扑：
流动式团队、赋能团队、复杂子系统团队、平台团队； 流动式团队 # 什么是“流动式团队”？
它对应一条单一、有价值的工作流，这也许是一个产品、一项服务、一组功能特性、一个用户故事或者一组用户画像。 流动式团队是组织中最主要的团队类型，其他基本团队拓扑的目标都是为了减轻流动式团队的负担。 与“流动式团队”相反的是按照“项目”组织开发工作。 “流动式团队”的必要能力，包括但不限于
应用的安全性、商业和技术的可行性分析、设计和架构、开发和编码、基础设施和可运维性、度量和监控、产品管理、测试和质量保证、用户体验； 为什么要叫做”流动式团队“而不是”产品团队”或“特性团队“：
“流动”一词有着更广泛的含义，它有助于强化组织对流动性的关注，从而确保流动的顺畅； 并非所有的软件都有产品或者特性这样的概念，但是总是可以从流动性的角度出发； 流动性团队的预期的行为：P94。
赋能团队 # 什么是“赋能团队”？
赋能团队由特定技术领域或产品领域的专家组成，它们给流动式团队提供“调研、学习、实践”新技术的能力。团队进行调研工作，尝试不同的方案，并在工具、实践、框架、技术栈等方面给出高质量的建议。 赋能团队应该尽可能避免自己成为知识的“象牙塔”： 不应该干涉其他团队的技术选择，而是要帮助团队理解并遵循组织级的技术约束； 应该提高流动式团队的自主性，而不是推广自己手动已经有的解决方案； “赋能团队”的预期行为：
赋能团队要主动了解流动式团队的需求，在深入协作时建立定期检查点和联合沟通机制； 赋能团队要保持它们的专业能力保持在浪潮之巅（在过去，这常常被视为架构师或者创新团队的使命）； 它们既要传播好消息，也要传播坏消息； 当流动式团队难以直接使用某些服务时，赋能团队应该充当内外部的服务代理； 不仅要促进自身团队内的学习，也要在流动式团队之间扮演组织内促进共享必要知识的角色。 与实践社区（Communities of Practice, CoP）:
共同点：它们都能提高团队的认知和能力； 区别：赋能团队每天的工作就是赋能，而实践社区则是一个相对松散的组织，每周甚至每个月才会搞一次活动； 复杂子系统团队 # 复杂子系统团队负责构建和维护系统中严重依赖专业领域知识的子系统。它们的设立目标是降低包含或使用复杂子系统的系统中各个流动式团队的认知负荷。
与传统“组件团队”的关键区别：
当某个子系统依赖于大量特定领域知识时才会建立“负责子系统团队”； 团队成立完全是基于认知负荷驱动的，而非出于组件共享的目的； “复杂子系统团队”的预期行为：
根据当前的开发阶段来安排响应的工作：在早期紧密合作，后期关注接口； 应该显著提高流动式团队的交付速度和质量； 需要根据需求优先级合理安排并完成交付。 平台团队 # 平台团队的目标是使流动式团队能够以高度自治的方式交付工作。平台团队提供的内部服务使得流动式团队无须开发底层服务，从而降低认知负荷。</description></item></channel></rss>