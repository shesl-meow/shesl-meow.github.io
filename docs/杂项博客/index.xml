<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>杂项博客 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/</link><description>Recent content in 杂项博客 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/cpp%E6%9D%82%E6%8A%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/cpp%E6%9D%82%E6%8A%80/</guid><description>cpp 杂技 # __builtin_expect：一个 if 分支极大可能不会执行，使用这个编译，附近的，编译器会将极大概率连续执行的代码编译为连续的二进制。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ethereum%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ethereum%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description>概念 # KDF：彩虹表攻击
重入攻击
数字货币的双重支付问题
递归长度前缀 Recursive Length Prefix (RLP)
Merkle Patricia Tree
工作量证明算法（Ethash、Casper）、共识算法
ÐΞVp2p
智能合约；
外部账户（EOA）和合约账户；
代码、项目、实践 # 运行这些程序：Ethereum、web3js(Whisper)、Swarm、Solidity（IDE：Remix）、Parity、Go-Ethereum； 使用 MetaMask 体验以太坊； 尝试运行一个完整的以太坊客户端节点；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/latexmanual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/latexmanual/</guid><description>Latex Command # Command on Linux # 使用 latex 编译的命令（详细的帮助文档可以使用 --help 参数查看）：
$ latexmk --help 使用 MikTex 编译的命令（详细的帮助文档可以使用 --help 参数查看）：
$ telatex --help Latex 安装包目录管理命令（详细的帮助文档可以使用 --help 参数查看）：
$ kpsewhich --help 手动安装到一个安装目录之后，需要使用以下命令更新 LaTex 的安装包搜索路径：
$ sudo mktexlsr Command on mac OS X #</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/linuxmanual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/linuxmanual/</guid><description>Linux Manual # 通过 SSH 连接服务器 # 通过以下的命令通过 ssh 登陆服务器：
$ ssh -l &amp;lt;username&amp;gt; &amp;lt;ip&amp;gt; 服务器开放指定端口 # 安装
$ sudo apt-get install iptables 添加规则。比如以下命令打开 8000 端口：
$ iptables -A INPUT -p tcp --dport 8000 -j ACCEPT 删除此条添加的规则则使用下面的命令：
$ iptables -D INPUT -p tcp --dport 8000 -j ACCEPT 保存规则
$ iptables-save 持续化规则。安装 iptables-persistent 支持：
$ sudo apt-get install iptables-persistent 使用进行持续化规则：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/tsdb%E5%AD%A6%E4%B9%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/tsdb%E5%AD%A6%E4%B9%A0/</guid><description>TSDB 学习 # 时序数据的特点：
数据按照时间严格单调排序； Append Only：只能向后插入数据，不能更新； 写数量远大于读数量：大于 90% 的数据从未被读取； 数据量级特别大，但是相对比较稳定； 随着时间的推移，数据的价值减小，最近数据的价值高于历史数据； 通常与 tag 聚合在一起，根据时间范围进行查询； Metrics 是字节跳动实现 tsdb 的解决方案，很多平台的数据源都来自 Metrics：
alarm、grafana、metro-fe、argos； Metrics 系统架构分为三级：
SDK 侧：通过 SDK 将日志信息发送到 agent，agent 通过 producer 发送到消息队列中； 核心逻辑：consimer/preshuffle 两个消费逻辑链路，分别将数据存储到冷热存储的两个不同数据库中； 数据存储：速度快的“热存储”TSDC、速度较慢的“冷存储”mstore； Open Source：
在业界有很多开源的解决方案：Influxdb、Opentsdb、Druid、Elasticsearch、Beringei 等；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</guid><description>在实习过程中，在字节跳动内部分享上学习的东西
:floppy_disk:客户端本地存储 # 作用 # 客户端本地存储主要有以下的几个作用：
作为网络 IO 的缓存：缓存图片、缓存接口的 Response； 保存配置或者数据：配置信息、状态信息、日志信息、Crash 信息等； 作为内存的 Backing Store：暂存大文件、征用扩展内存； 常见存储方案分析 # 如何分析各种存储方案，主要考虑以下几个特性：
读写性能：平均读写性能、最坏读写性能； 并发性能：是否线程安全、读写操作互相并发的能力； 数据完整性：数据损失或丢失的概率； 空间性能：存储相同的数据，需要的磁盘与内存空间； Plist # plist 是一种 xml 格式，是 iOS 中最常用的配置存储数据格式，下面是一个例子：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;quiz&amp;lt;/key&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;question&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;text&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;What does &amp;#39;API&amp;#39; stand for?</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F/</guid><description>参考：
https://sherryhsu.medium.com/session-vs-token-based-authentication-11a6c5ac45e4 https://jwt.io/introduction https://stackoverflow.com/questions/43452896/authentication-jwt-usage-vs-session https://en.wikipedia.org/wiki/OAuth 用户系统 # Session Base Authentication # 流程简介 # 最传统的用户系统，django 的默认实现，用户登陆时后服务端会为当前会话创建一个 session 并且将 sessionID 作为 cookie 设置到客户端上，用户每次需要访问敏感资源时需要带上 sessionID，服务端通过 session 判断用户是否登陆成功。简单流程如下：
JWT (Json Web Token) # 格式 # JWT 是一种被写入 RFC7519 的协议标准。一个 JWT 的格式由 Base64 加密的 “Header”、“Payload”、“Signature” 三个部分由 . 字符拼接而成：
上图中可以看出三部分的作用：
header 部分表示当前 JWT 的算法； playload 则存储了当前登陆用户的信息（在传统基于 session 的登陆系统下，这一信息一般是存储在服务端），Playload 分为 Registered claims/Public claims/Private claims 三个类型； signature 用服务端的私钥进行 HMAC 确保 playload 中的信息没有被修改过； 工作流 # 在认证成功后，服务器会返回给客户端一个 JWT。当客户端需要访问任何敏感资源时，需要设置 Authorization 的请求头：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/%E7%B4%A0%E6%95%B0%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/%E7%B4%A0%E6%95%B0%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</guid><description>素数相关算法 # 素性检测 # 关于一些素性检测的底层算法，在学校时，信息安全数学基础课上讲过。
素数数量计算 # Sieve of Eratosthenes，筛法：
algorithm Sieve of Eratosthenes is input: an integer n &amp;gt; 1. output: all prime numbers from 2 through n. let A be an array of Boolean values, indexed by integers 2 to n, initially all set to true. for i = 2, 3, 4, ..., not exceeding √n do if A[i] is true for j = i2, i2+i, i2+2i, i2+3i, .</description></item></channel></rss>