<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ctf-wiki on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/</link><description>Recent content in ctf-wiki on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/offbyone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/offbyone/</guid><description>题目：Asis CTF 2016 b00ks
Off By One # 文件信息 # 首先检查保护等级：
$ checksec ./b00ks [*] &amp;#39;/mnt/d/program/ctf/ctf-wiki/offbyone/b00ks&amp;#39; Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled 程序没有开启栈保护。查看各个段的权限：
gdb-peda$ vmmap Warning: not running Start End Perm Name 0x00000808 0x0000135d rx-p /mnt/d/program/ctf/ctf-wiki/offbyone/b00ks 0x00000238 0x00001914 r--p /mnt/d/program/ctf/ctf-wiki/offbyone/b00ks 0x00201d58 0x00202100 rw-p /mnt/d/program/ctf/ctf-wiki/offbyone/b00ks 各个段的地址则可以通过以下的方式查看：
$ readelf --section-headers ./b00ks There are 27 section headers, starting at offset 0x2160: .</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/ret2libc3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/ret2libc3/</guid><description>ret2libc # 保护等级 # 首先检查保护等级：
$ checksec ret2libc3 [*] &amp;#39;/mnt/d/program/ctf/ctf-wiki/ret2libc3/ret2libc3&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 可以看到这是一个开启了部分只读和栈溢出保护的程序。
程序逻辑 # 在 Ida Pro 中打开即可看到 main 函数的伪代码：
int __cdecl main(int argc, const char **argv, const char **envp) { char s; // [esp+1Ch] [ebp-64h] setvbuf(stdout, 0, 2, 0); setvbuf(stdin, 0, 1, 0); puts(&amp;#34;No surprise anymore, system disappeard QQ.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/useafterfree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E6%9D%82%E9%A1%B9%E5%8D%9A%E5%AE%A2/ctf-writeup/ctf-wiki/useafterfree/</guid><description>题目：Hitcon Training lab10
Use After Free # 文件信息 # 检查文件安全性：
$ checksec ./hacknote [*] &amp;#39;/mnt/d/program/ctf/ctf-wiki/useafterfree/hacknote&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) 程序没有开启地址随机化，有栈保护和堆栈不可执行。
程序逻辑 # 这个可执行文件中存在函数的调式信息，main 函数就是打印菜单，然后执行几个选项的常规套路。
menu # int menu() { puts(&amp;#34;----------------------&amp;#34;); puts(&amp;#34; HackNote &amp;#34;); puts(&amp;#34;----------------------&amp;#34;); puts(&amp;#34; 1. Add note &amp;#34;); puts(&amp;#34; 2. Delete note &amp;#34;); puts(&amp;#34; 3.</description></item></channel></rss>