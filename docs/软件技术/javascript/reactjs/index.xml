<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reactjs on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/</link><description>Recent content in reactjs on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/1.react%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/1.react%E5%9F%BA%E7%A1%80/</guid><description>React 基础 # 从原生到 React # 原生例子 # 一个 demo，如何用原生的 JavaScript 实现一个点赞按钮（即简单的点击一次更换一次图片）。
// 将点赞按钮可复用地组件化 class LikeStar { constructor() { this.state = { isLiked: false; } this.redStarSrc = URL_OF_RED_STAR; this.whiteStarSrc = URL_OF_WHITE_STAR; } changeStar = () =&amp;gt; { this.state.isLiked = !this.state.isLiked; const imgSrc = this.state.isLiked ? this.redStarSrc : this.whiteStarSrc; const $star = this.el.querySelector(&amp;#39;.js-star&amp;#39;); // 其中 js-star 是 img 标签的一个 class $star.setAttribute(&amp;#39;src&amp;#39;, imgSrc); } render() { this.el = createDOMFromString(`&amp;lt;img class=&amp;#34;js-star&amp;#34;&amp;gt; src=&amp;#34;${this.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/2.react%E8%BF%9B%E9%98%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/2.react%E8%BF%9B%E9%98%B6/</guid><description>React 进阶 # Context # Context 是 React 中比较特殊的对象，是一种组件中传值的特殊方式。
因为 React 中的数据流向是单向的，所以如果需要在层级很深的组件树中传值的话，需要不断地从 props 中向下传值，Context 则解决了这个问题（不同层级的组件需要访问同样一些数据）。
React 相关 API：
API 作用 React.createContext 创建一个 Context 对象，接收一个“默认值”作为参数 Context.Provider 一个 React 组件，接受一个 value 的属性值。被这个组件包裹的子组件都可以使用这个属性值。 contextType 将一个组件的 static 属性 contextType 设置为对应的 Context 对象，即可在这个组件内部的任意生命周期函数中，通过 this.context 访问到 Provider 提供的属性值。 Context.Cosumer 一个 React 组件，接受一个函数作为其包裹的内容，函数的参数即为 Provider 的 value 值。 注意事项：
context 的默认值，只有在 Cosumer 的外层没有 Provider 包裹的时候使用； Provider 支持多层嵌套； 消费组件的更新只取决于 Provider 是否更新，不会执行 shouldComponentUpdate； 高阶组件 # 定义：高阶组件（high order components）是参数为组件且返回值也为组件的函数。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/javascript/reactjs/hooks/</guid><description>参考文档：
https://zh-hans.reactjs.org/docs/hooks-intro https://www.yuque.com/qianduanyongbuweinu/efahmp/vasyzy#8OGwa Hooks # 例子 # 与 Hooks 相关的 API 都是 use 开头的，它返回一个元组。以 useState 为例，它返回第一个元素即这个状态，第二个元素是设置这个状态的函数。
先看一个 useState 使用的例子：
export const MyComponent: React.FC = () =&amp;gt; { const [st, setSt] = useState&amp;lt;bool&amp;gt;(false); return ( &amp;lt;div&amp;gt; &amp;lt;button onClick={setSt} /&amp;gt; &amp;lt;span&amp;gt;{st}&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; ) } 另一个常见的 Hooks 函数即 useEffect，类似于 OOP 中的 componentDidMount 与 componentDidUpdate：
export const MyComponent: React.FC = () =&amp;gt; { const [count, setCount] = useState(0); useEffect(() =&amp;gt; { document.</description></item></channel></rss>