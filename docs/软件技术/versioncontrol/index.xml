<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VersionControl on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/</link><description>Recent content in VersionControl on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/gitadvance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/gitadvance/</guid><description>Git Advance # Git 文件系统 # 概述 # 我们在一个 git init 结果的空仓库中，简述一下各个部分的作用：
.git ├── HEAD // 指示当前被检出的分支 ├── branches // 废弃 ├── config // 项目内的配置文件 ├── description // 供GitWeb程序使用 ├── hooks // 存储钩子脚本 │ ├── applypatch-msg.sample │ ... ├── info // 目录包含一个全局性排除(global exclude)文件， │ └── exclude // 用以放置那些不希望被记录在 .gitignore 文件中的忽略模式(ignored patterns) ├── objects // 存储所有数据内容 │ ├── info // 仓库的额外信息 │ └── pack // 压缩后的包文件 └── refs // 存储指向分支的提交对象的指针 ├── heads // 分支 └── tags // 标签 执行以下命令可以查看 Git 目录结构说明：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/svntutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/svntutorial/</guid><description>学习网址：
https://www.tutorialspoint.com/svn/svn_environment.htm SVN # SVN is a Version Control System.
Life Cycle # Create Repository: create operation is used to create a new repository. Checkout: Checkout operation is used to create a working copy from the repository. Update: update operation is used to update working copy. Perform Changes: Rename operation changes the name of the file/directory. Move operation is used to move files/directories from one place to another in a repository tree.</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/versioncontrol/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</guid><description>版本控制 # 现在流行的版本系统主要分为集中式版本系统、分布式版本系统 2 大类。
集中式版本系统 # 主要的集中式版本控制系统：
CVS (Concurrent Versions System) free software，以 GNU 版权发行，许多老的 GNU 项目都用 CVS，2008 年后更新不活跃。 Subversion (Apache Subversion) Apache License，top-level Apache project，兼容 CVS。 SVN 则是最著名的集中式版本控制系统。 SVN 的主要特点：
SVN 需要一个中心服务器，用来保存所有文件的所有修订版本。
客户端只保存最新的版本或者设置为检出某一个历史版本，客户端必须在连接到中心服务器之后才能做出检出某个版本、查询文件修改历史、提交更新等操作。
每一次 commit 之前，都需要连接中心服务器获取最新的文件版本，如果中心服务器宕机，则你无法提交任何更新，也无法将项目回溯到历史版本。
如果中心服务器发生磁盘故障，而你又没有做任何备份，你将会丢失当前和历史的所有数据。
对 分支 的支持较弱，SVN 的分支就是一个完整、独立的文件夹，分支的创建和合并代价都非常高（实际可能会通过硬连接的方式节省空间）；
无法追踪目录文件的变化，变更目录需要使用 SVN 命令。
管理员能够轻松掌握每一个开发者的权限（Git 自身不支持分支保护）。
分布式版本系统 # 主要的分布式管理系统：</description></item></channel></rss>