<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>理论课程 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/</link><description>Recent content in 理论课程 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%89%91%E6%8C%87offer/1.%E9%9D%A2%E8%AF%95%E7%9A%84%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%89%91%E6%8C%87offer/1.%E9%9D%A2%E8%AF%95%E7%9A%84%E6%B5%81%E7%A8%8B/</guid><description>面试的三个环节 # 行为面试环节：简单的自我介绍。
应聘者的项目经历：建议用 STAR 模型去描述自己的每一个项目经历。 Situation: 简短的项目背景； Task: 自己完成的任务； Action: 为了完成任务，自己做了哪些工作； Result: 自己的贡献； 应聘者掌握的技能：注意区分“了解”、“熟悉”、“精通”； 回答为什么跳槽：不要抱怨，也不要流露出负面的情绪； 技术面试环节：面试的重头戏，对面试结果起决定性作用，总体来说就关注应聘者的 5 种素质：
基础知识扎实全面，包括编程语言、数据结构、算法等； 能写出正确的、完整的、鲁棒的高质量代码； 能思路清晰地分析并解决复杂的问题； 能够从时间、空间复杂度两个方面优化算法的效率； 具备优秀的综合能力：包括问题沟通能力、学习能力、发散性思维能力等； 应聘者提问环节，在结束面试的前 5-10 分钟，面试官会给应聘者几个问题，应聘者问题的质量也会对面试结果有一定影响。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%89%91%E6%8C%87offer/2.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E5%89%91%E6%8C%87offer/2.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>基础知识 # 编程语言 # 数据结构 # 算法和数据操作 #</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/1.%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E5%87%A0%E4%BD%95%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/1.%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E5%87%A0%E4%BD%95%E8%A7%A3/</guid><description>1. 方程组的几何解 # Linear equations can be written as $$A \times X = B$$
Find linear combination of columns (x&amp;rsquo;s coefficient vector, and y&amp;rsquo;s ciefficient vector);
任何一个线性方程可以从两个视角了解它：
Row Picture：将每单个方程视作为空间中的某个点集，求方程的解即位求点集的交点； Column Picture：将每个未知元在各个方程中的系数，视作一个向量，求方程的解即求这些向量的线性组合； 在用未知数系数向量的思维解决问题时，我们可能会思考以下问题：
有没有一种通用的方法能够得到方程的解？ 有没有一种方法能够判断方程组的条件是否足够，即原方程是否有解？ 矩阵乘法的理解方式有两种：
通俗的点乘理解； 矩阵的每个列都是一个向量，矩阵乘以一个向量，可以理解为矩阵的列向量的线性组合。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/2.%E7%9F%A9%E9%98%B5%E6%B6%88%E5%85%83%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/2.%E7%9F%A9%E9%98%B5%E6%B6%88%E5%85%83%E6%B3%95/</guid><description>2. 矩阵消元法 # 矩阵消元法与行列式一样都是可以用于解决方程组的方式。
矩阵消元法的步骤如下：
考虑系数矩阵，按行自上而下通过与之前行的加减法运算，将 pivot（对角线上的元素）左侧的所有元素运算为 0；运算结束后可以得到一个上三角矩阵，记为 U； 对右侧向量做相同的运算，按行自下而上回带计算可以得到所有的未知数； 概念增广矩阵（augmented matrix）：考虑所有系数和结果向量的一个大矩阵；
Simple operation of matrix:
Matrix * Vector: Result in a column, linear combination of the columns of the matrix; Vector * Matrix: Result in a row, linear combination of the rows of the matrix; 矩阵消元法中的步骤，行之间的“加减法运算”就可以用矩阵乘法表示。比如某一个操作“将第二行减去第一行的 3 倍”，这一操作就可以用这样一个矩阵表示：$$\pmatrix{1 &amp;amp;0 &amp;amp;0 \ -3 &amp;amp;1 &amp;amp;0 \ 0 &amp;amp;0 &amp;amp;1}$$，它的含义为：
第一行保持不变，即线性组合 $$ 1 * row_1 + 0 * row_2 + 0 * row_3 $$； 第二行减去第一行的三倍，即线性组合 $$-3 * row_1 + 1 * row_2 * 0 * row_3$$； 第三行保持不变，即线性组合 $$0 * row_1 + 0 * row_2 + 1 * row_3$$ 矩阵乘法运算的重要性质：不满足交换律、满足结合律；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/3.%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E5%92%8C%E9%80%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/3.%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E5%92%8C%E9%80%86/</guid><description>3. 矩阵乘法和逆 # 乘法 # 矩阵乘法的规则，对于运算 $$A * B = C$$：
C 中的元素值 $$C_{ij} = \sum_{k = 1}^n A_{ik} * B_{kj}$$；
乘法可以运算的前提条件：A 的列数等于 B 的行数；
其他理解矩阵乘法的方式：
C 中的任意一行：B 的所有行的线性组合； C 中的任意一列：A 的所有列的线性组合； C 是：“A 的所有列与B 的所有行的乘积”的和； 分块乘法：$$\pmatrix{A_1 &amp;amp;A_2 \ A_3 &amp;amp;A_4} * \pmatrix{ B_1 &amp;amp;B_2 \ B_3 &amp;amp;B_4 } = \pmatrix{A_1B_1 + A_2B_3 &amp;amp;A_1B_2 + A_2B_4 \ A_3B_1 + A_4B_3 &amp;amp;A_3B_2 + A_4B_4}$$</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/4.%E7%9F%A9%E9%98%B5%E7%9A%84lu%E5%88%86%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/4.%E7%9F%A9%E9%98%B5%E7%9A%84lu%E5%88%86%E8%A7%A3/</guid><description>矩阵的LU分解 # AB 的逆：$$B^{-1} A^{-1}$$
转置的逆，$$A^T$$ 的逆是 $$(A^{-1})^T$$
矩阵的 LU 分解：
任意一个矩阵 A 表示一定可以表示为两个矩阵 L、U 的乘积，其中 L 是一个下三角矩阵、 U 是一个上三角矩阵； 消元法中，已经知道：
矩阵 A 可以通过左乘若干个行变化操作矩阵，可以得到一个上三角矩阵，即 $$E_{n(n-1)}\cdots E_{21}A = U$$；
由上面的公式可以得到：$$L = E_{21}^{-1} \cdots E_{n(n-1)}^{-1}$$，是一个下三角矩阵；
对于每一个行操作的逆也是很好求的，它的对角线是 1，一个位置有操作数 x，其他位置都是 0，它的逆就是将对应位置的操作数改写成 -x 即可；
这个方法需要的时间复杂度是 $$O(n^2 \cdot n)$$
Permutation Matrix:
For matrix size $$n \times n$$, there are $$n!$$ different permutation matrices; Mutiplation of two permutation matrix will result in a permutation matrix; Inverse of permutaion matrix: $$P^{-1} = P^{T}$$ 上面的 A=LU 公式分解中存在一个问题：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/5.%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-mit18.06/5.%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/</guid><description>矩阵的转置 # 什么是转置（Transpose）：
对于 A 的转置矩阵 $$A^T$$，其中的元素满足 $$(A^T){ij} = A{ji}$$ 对称矩阵（Symmetric Matrix）：满足 $$A^T = A$$ 条件的矩阵
有趣的性质：
矩阵和他转置的积是对称矩阵，即 $$(AA^T)^T = AA^T$$。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/10.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%87%86%E5%A4%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/10.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%87%86%E5%A4%87/</guid><description>基础知识准备 # 基础概念 # 因为笔者太垃圾，补充的一些譬如《线性代数》、《概率论与数理统计》等的知识
正定矩阵：
熵（Entropy）：
热力学中的概念，由香农引入到信息论中； 设 $$X \in {x_1, x_2, \cdots, x_n}$$ 为一个离散随机变量，其概率分布为 $$p(X = x_i) = p_i, i = 1,2,\cdots, n$$，则 X 的熵为： $$\displaystyle H(X) = - \sum_{i = 1}^n p_i log p_i, \text{ where when pi = 0, define } H(X) = 0$$ 极大似然估计：
先验概率、后验概率：
边缘概率：
马尔可夫链蒙特卡洛（Markov chain Monte Carlo，MCMC）方法：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/11.%E5%90%88%E7%BA%A6%E5%B9%BF%E5%91%8A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/11.%E5%90%88%E7%BA%A6%E5%B9%BF%E5%91%8A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</guid><description>合约广告核心技术 # 广告排期系统 # 防天窗广告：广告加载错误时的默认广告。
在线分配 # 参考资料：
拉格朗日对偶问题：https://zhuanlan.zhihu.com/p/31131842 在线分配技术解决的典型问题：
GD 问题、AdWords 问题、展示广告问题、最大代表性分配（MRA）问题、询价优化问题等； 实用的一些在线分配方案：
直接求解原始的分配方案； 基于对偶算法的紧凑分配方案； 综合分配方案 SHALE； 启发式分配方案 HWM；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/12.%E5%8F%97%E4%BC%97%E5%AE%9A%E5%90%91%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/12.%E5%8F%97%E4%BC%97%E5%AE%9A%E5%90%91%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</guid><description>受众定向核心技术 # 文本主题挖掘 # 三种解决模型：
LSA 模型（潜在语义分析，Latent Semantic Analysis）； PLSI 模型（概率潜在语义索引，Probabilistic Latent Semantic Indexing）； LDA 模型（潜在狄利克雷分配，Latent Dirichlet Allocation）； 行为定向 # 行为定向建模问题：
工程上非常典型的建模思路：当面对多个自变量的回归问题时，可以先根据目标值的特性选择合适的指数族分布来描述，并用线性模型将多个自变量和指数族分布的参数联系起来。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/13.%E7%AB%9E%E4%BB%B7%E5%B9%BF%E5%91%8A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/13.%E7%AB%9E%E4%BB%B7%E5%B9%BF%E5%91%8A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</guid><description>竞价广告核心技术 # 对于一个 CPC 结算的竞价广告系统，需要得到广告候选集合，并计算每个候选的点击率。这对应着两个竞价广告关键的计算问题，即“广告检索”和“广告排序”。
搜索广告系统 # 查询扩展 # 需求方需要通过扩展关键词获得更多的流量，供给侧则需要借此来变现更多的流量和提高竞价的激烈程度。
相关的方法有很多，这里介绍三种主要的思路：
基于推荐的方法：
考虑用户的一个会话（$$s = {1, \cdots, M}$$）和一组关键词 $$w = {1, \cdots, N}$$ 对应的交互强度矩阵 $${x_{mn}}_{M \times N}$$，矩阵的值表示用户在这个会话中搜索对应关键词的次数。 推荐方法的基本任务：基于上述矩阵中的已知元素值，去预测填充矩阵中没有观测的单元。 协同过滤：这样的问题也被称为“协同过滤问题”（Collaborative Filtering，CF），即根据群体用户的选择关联性进行推荐的问题。 算法：协同过滤的推荐算法可以主要分为“基于内存的非参数方法”和“基于模型的参数化方法”，各种推荐问题的本质都是对交互强度矩阵进行平滑。 基于主题模型的方法：
基于历史效果的方法：
广告检索 # 布尔表达式检索 # 相关性检索 # 基于 DNN 的语义建模 # 最近邻语义检索 # 最近邻检索的工程效率是一个核心问题：
把“查询”和“文档”都通过上一节中基于 DNN 的相关性建模进行 Word-Embedding 表达后，检索最相关的 K 个文档的问题，就是在向量空间中计算查询 c 与所有候选文档 a 之间的 K 个最近邻问题。 加速最近邻检索算法称为 “ANN 查找 (Approximate Nearest Neighbor)”，有三类典型算法：哈希算法、向量量化算法、基于图的算法； 哈希算法，分为数据无关的轻量级算法、数据有关的算法（学习哈希、语义哈希、深度学习哈希等）。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/2.%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/2.%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A%E5%9F%BA%E7%A1%80/</guid><description>计算广告基础 # 核心问题 # 计算广告的核心问题用文字表述如下：
为一系列的用户与上下文的组合找到最合适的广告投放策略以优化整体广告活动的利润； 在数学上，可以表示为一个最优化问题：
$$\displaystyle \max{\sum_{i=1}^T (r_i - q_i)}, \text{ s.t. } \sum_{i=1}^Td_{ik} \le D_k, \forall k$$
其中 i 表示某次广告展示、k 表示某个广告主；r 为总收入、q 为总成本、D 为某个广告主的预算；
引入 a、u、c 表示广告、用户、上下文，那么上面的数学表达式中的 r、q 是关于它们的函数；
也就是公式：$$\displaystyle \max{\sum_{i=1}^T (r(a_i, u_i, c_i) - q(a_i, u_i, c_i))}, \text{ s.t. } \sum_{i=1}^Td(a_i, u_i, c_i, k) \le D(k), \forall k$$
上面的广告收入是我们研究的重点，可以按照单次广告展示预期收入（eCPM）分解：
$$eCPM = r(a,u, c) = \mu(a, u, c) \cdot v(a, u, c)$$，其中 $$\mu$$ 表示点击率，v 表示单词点击带来的收益；</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/5.%E7%AB%9E%E4%BB%B7%E5%B9%BF%E5%91%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/5.%E7%AB%9E%E4%BB%B7%E5%B9%BF%E5%91%8A/</guid><description>竞价广告 # 位置拍卖 # 如何设计位置拍卖问题中的一些重要机制，往往影响整个市场的收益、稳定性、公平性，常见的机制包括“定价”、“市场保留价”、“价格挤压”等。
市场保留价（Market Reserve Price, MRP） # 竞价广告市场通常要设置一个赢得拍卖位置的最低价格，广告主只有在高于这个价格时才能获得竞价机会，这个价格就称之为市场保留价 MRP。
市场保留价的设置有两种方式：
对这个整个竞价市场采用同样的 MRP； 根据不同的标的物（比如搜索广告里面的关键词）的特性设置不同的 MRP； 无论是哪种设置方式，基本原理都是：
eCPM 分布 $$\rightarrow$$ 填充率没有明显下降的 CPM-MRP $$\rightarrow$$ 根据质量倒推 CPC-MRP； 定价问题 # 纳什均衡（Nash Equilibrium）状态：每个广告商都通过出价得到最符合自己利益的位置。
GSP 定价（广义第二高价）：最常见的定价策略，向最高出价收取其下一位广告主的出价；
VCG 定价（Vickrey-Clarke-Groves 研究得到的社会福利最优定价策略）：
它的基本思想是对应赢得某个广告位的广告主，它付出的成本应该等于他占据这个位置给其他市场参与者带来的价值损害。 具体的说，某个位置 s 的定价为：$$\displaystyle q_s = \sum_{t \gt s} (\mu_{t - 1} - \mu_t) \cdot v_{t}$$ Myerson 最优拍卖：
最优拍卖问题（广告平台通过定价使平台的价值最大）的最优解。 参考知乎文章；参考课程 Stanford Algorithmic Game Theory CS364A； 价格挤压 # 在 CPC 结算的广告产品中，eCPM 可以表示为点击率和出价的乘积，即 $$r = \mu \cdot bid_{CPC}$$。</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/9.%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/9.%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88/</guid><description>计算广告技术概览 # 个性化系统框架 # 一般的个性化系统主要由以下 4 个主体部分组成：
Online Serving Engine：用于响应实时请求，完成决策的“在线投放引擎”； Offline Distributed Computing：离线的分布式计算数据处理平台； Stream Computing：在线实时反馈的流计算平台； Data Highway：连接和转运以上三个部分数据流的数据高速公路； 广告系统优化目标 # 广告系统的核心优化目标是下面的回归值：
$$\displaystyle \hat{a_{1,\dots, T}} = max_{a_1, \dots, T} \sum_{i=1}^{T}{r(a_i, u_i, c_i) - q(a_i, u_i, c_i)}$$ 其中：$$r(a_i, u_i, c_i) = eCPM = \mu(a_i, u_i, c_i) * v(a_i, u_i, c_i)$$ 使得约束满足：$$\displaystyle \sum_{i = 1}^T d(a_i, u_i, c_i, k) \le D_k, \forall k$$ 变量含义：
$$a$$：是指广告产品的利润；$$r$$：表示单词展示的预估收益；$$q$$：是指单次展示广告的成本； $$\mu$$：是指点击率；$$v$$：表示的点击价值； $$k$$：参与广告活动的单个广告主；$$D_k$$：表示这个广告主的成本约束； 计算广告系统架构 # 广告系统架构与“个性化推荐系统架构”类似。它由以下几个部分组成：</description></item></channel></rss>