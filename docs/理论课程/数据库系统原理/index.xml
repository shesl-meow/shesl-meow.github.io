<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库系统原理 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</link><description>Recent content in 数据库系统原理 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0/</guid><description>参考：
https://www.zhihu.com/question/31346392
https://github.com/CyC2018/CS-Notes/blob/master/notes/数据库系统原理.md
https://www.jianshu.com/p/f692d4f8a53e
数据库系统原理 # 事务 # 为什么会出现事务（Transaction）？
为了当应用程序访问数据库的时候，事务能够简化我们的编程模型。 应用层不需要去考虑各种各样的潜在错误（网络错误、服务器宕机等）和并发问题； 什么是事务？
满足 ACID 四个特性的一组操作； 可以通过 commit 操作结束一个事务，也可以通过 RollBack 操作回滚到事务的开始； ACID：
原子性（Atomicity）：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚（可以通过 undo log 实现）。 一致性（Consistency）：事务执行前后的状态都是正确的，事务操作应当将数据库从一个正确状态转移到另一个正确状态； 隔离性（Isolation）：降低并发事务之间的影响程度； 持久性（Durability）：一旦事务提交，则其所做的修改将会永远保存到数据库中；若系统发生崩溃，可以通过 redo log 重做； 并发问题 # 并发导致的一致性问题：
丢失修改：并发进行的事务对同一个数据进行修改，后者覆盖了前者的内容；
脏读：事务 A 修改了一个数据，但未提交；事务 B 读到了事务 A 未提交的更新结果，如果事务 A 提交失败进行了回滚，事务 B 读到的就是脏数据。
不可重复读：在同一个事务中，对于同一份数据读取到的结果不一致。比如，事务 B 在事务 A 提交前读到的结果，和提交后读到的结果可能不同。</description></item></channel></rss>