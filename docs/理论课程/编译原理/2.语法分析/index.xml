<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2.语法分析 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</link><description>Recent content in 2.语法分析 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/review/</guid><description> 编译原理期末考试复习，于 2019-1-15
REVIEW # graph TB;
TOPIC[语法分析];
TOPIC--&amp;gt;M1; TOPIC--&amp;gt;M2;
subgraph 自上而下
M1[自上而下]; WF1(&amp;quot;LL(1)文法&amp;quot;); WF11(递归下降分析器); WF12(预测分析程序);
M1--&amp;gt;|1.不含左递归&amp;lt;br&amp;gt;2.非终结符 FIRST 集不相交&amp;lt;br&amp;gt;3.一个关于epsilon时的约束|WF1
WF1--&amp;gt;|一个非终结符&amp;lt;br&amp;gt;对应一个子程序|WF11;
WF1--&amp;gt;|构造预测分析表|WF12
end
subgraph 自下而上
M2[自下而上]; WF2(算符优先文法); WF3(&amp;quot;LR分析法&amp;quot;); WF31(&amp;quot;SLR分析法&amp;lt;br&amp;gt;LR(0)项目&amp;quot;); WF32(&amp;quot;规范LR分析法&amp;lt;br&amp;gt;LR(1)项目&amp;quot;); WF33(&amp;quot;LALR分析法&amp;quot;)
M2--&amp;gt;|&amp;quot;1.算符文法:&amp;lt;br&amp;gt;不含两个相继的非终结符&amp;lt;br&amp;gt;2.算符优先文法:&amp;lt;br&amp;gt;算符间关系是唯一的&amp;quot;|WF2
M2--&amp;gt;|状态&amp;lt;br&amp;gt;ACTION 子表&amp;lt;br&amp;gt;GOTO 子表|WF3
WF3--&amp;gt;|1.无移进规约冲突&amp;lt;br&amp;gt;2.不含多个规约项|WF31
WF3--&amp;gt;|&amp;quot;通过多读一个词&amp;lt;br&amp;gt;解决LR(0)冲突&amp;quot;|WF32
WF3--&amp;gt;|&amp;quot;合并LR(1)项目同心集&amp;quot;|WF33
end</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B/</guid><description>自上而下分析 Top-down # 从文法的开始符号开始，反复使用各种产生式，寻找 “匹配” 的推导。
推导：根据文法的产生式规则，把串中出现的产生式的左部符号替换成右部 从树的根节点开始，构造语法树。
算法：递归下降法，预测分析程序。
基本问题 # 面临的两个基本问题
当面临多个候选式时的回溯问题。 文法的左递归问题。 左递归的消除 # 一个文法消除左递归的条件：
不含以 $$\epsilon$$ 为右部的左产生式 不含回路，即不含推导 $$P \Rightarrow P$$ 直接左递归的消除：
产生式的直接左递归：$$P \rightarrow P\alpha | \beta, \beta 不以 \beta 开头$$ 转变成右递归文法： $$P \rightarrow \beta P'$$ $$P' \rightarrow \alpha P' | \epsilon$$ 推广：$$P \rightarrow P\alpha_1 | P\alpha_2 | &amp;hellip;| P\alpha_m| \beta_1 | \beta_2 | &amp;hellip; | \beta_n$$（每个 $$\alpha$$ 都不等于 $$\epsilon$$，每个 $$\beta$$ 都不以 P 开头） $$P \rightarrow \beta_1 P' | \beta_2 P‘ |&amp;hellip;|\beta_n P'$$ $$P' \rightarrow P' \alpha_1 | P' \alpha_2 | &amp;hellip; | P' \alpha_m$$ 间接左递归的消除：</description></item><item><title/><link>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%90%86%E8%AE%BA%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A/</guid><description>自下而上 Bottom-up # 从输入串开始，逐步进行归约，直到文法的开始符号。
规约：根据文法的产生式规则，把串中出现的产生式右部替换成左部符号； 从树的叶节点开始，构造语法树。
算法：算符优先分析法，LR 分析法。
简述概念 # 基本思想：
采用 “移进-规约” 思想进行自下而上分析 用一个寄存符号的先进后出栈，把输入符号一个一个地移进栈里，当栈顶形成某个产生式的候选式时，即把栈顶的这一部分替换为（规约）该产生式的左部 核心问题：识别可归约串。
短语：
令 G 是一个文法，S 是文法的开始符号，假设 $$\alpha \beta \delta$$ 是文法 G 的一个句型，如果有 $$S \overset{*}{\Rightarrow} \alpha A \delta 且 A \overset{+}{\Rightarrow} \beta$$，则 $$\beta$$ 称是句型 $$\alpha \beta \delta$$ 相对于非终结符 A 的短语。 如果有 $$A \Rightarrow \beta$$，则称 $$\beta$$ 是句型 $$\alpha \beta \delta$$ 相对于规则 $$A \rightarrow \beta$$ 的直接短语。 一个句型的最左直接短语称为该句型的句柄。 分析过程描述：可以用 步骤、符号栈、输入串、所用产生式 四元组来描述。</description></item></channel></rss>