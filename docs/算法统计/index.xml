<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法统计 on shesl-meow's note site</title><link>http://shesl-meow.github.io/docs/%E7%AE%97%E6%B3%95%E7%BB%9F%E8%AE%A1/</link><description>Recent content in 算法统计 on shesl-meow's note site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="http://shesl-meow.github.io/docs/%E7%AE%97%E6%B3%95%E7%BB%9F%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://shesl-meow.github.io/docs/%E7%AE%97%E6%B3%95%E7%BB%9F%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://shesl-meow.github.io/docs/%E7%AE%97%E6%B3%95%E7%BB%9F%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</guid><description>算法小记 # Fisher–Yates shuffle 洗牌算法：https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
Boyer-Moore 多数投票算法：https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm
func majorityElement(nums []int) int { iter, most := 0, 0 for _,num := range nums { if iter == 0 { most, iter = num, iter+1 } else if most == num { iter += 1 } else { iter -= 1 } } count, sz := 0, len(nums) for _,num := range nums { if num == most { count += 1 } if count * 2 &amp;gt; sz { return most } } return -1 }</description></item></channel></rss>